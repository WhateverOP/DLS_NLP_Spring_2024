{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1q77WixYXvCFQtvRD-RbCQe7zC06hn7d7","timestamp":1708365361858},{"file_id":"12BxEICwjMhOcIQID1zn06K6kFG92GZcf","timestamp":1708035269638},{"file_id":"1pYR9hzeFxq1T5kZThLvgA7bkmcNQtbrq","timestamp":1707661673565}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"1ecb559de5874167acc5dc98d374c79d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b95f4bb33e7d47c18bd008071ea4e167","IPY_MODEL_12d2f03c4db247f8a3872ac665284d19","IPY_MODEL_0cc8e2a9b1634aaf8810443494f256e0"],"layout":"IPY_MODEL_4e610e99a603427b9781c47ef2d8baeb"}},"b95f4bb33e7d47c18bd008071ea4e167":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bbc774034aab4a6690aa05d014c9180c","placeholder":"​","style":"IPY_MODEL_cfaa926a31fe4f4c816e6833388f5ce8","value":"config.json: 100%"}},"12d2f03c4db247f8a3872ac665284d19":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_a1fe8bf191f748afb31b8428b82c6063","max":483,"min":0,"orientation":"horizontal","style":"IPY_MODEL_86a6427c577d4797a420035057a7467e","value":483}},"0cc8e2a9b1634aaf8810443494f256e0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9092db5b84364284b25a9aaf893e30e7","placeholder":"​","style":"IPY_MODEL_cea9b15561f5453bbc1f9b56d14f8791","value":" 483/483 [00:00&lt;00:00, 17.5kB/s]"}},"4e610e99a603427b9781c47ef2d8baeb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bbc774034aab4a6690aa05d014c9180c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cfaa926a31fe4f4c816e6833388f5ce8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a1fe8bf191f748afb31b8428b82c6063":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"86a6427c577d4797a420035057a7467e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"9092db5b84364284b25a9aaf893e30e7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cea9b15561f5453bbc1f9b56d14f8791":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a57c3430c5644bbe9fdaecf501820d2d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"38147f643afb456c80bd1ca3d1350320":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"3b0527e1ed824a069ae07241ae11a078":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8971777f05a246f48fdbb66415eec100":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"4b4e0fca180a46419101146429cf5fe1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"288647bb4b004bdca84f0abb192f7439":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"37c1809691f94239ad7b4bd0ca9647d4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3b0527e1ed824a069ae07241ae11a078","placeholder":"​","style":"IPY_MODEL_8971777f05a246f48fdbb66415eec100","value":"model.safetensors: 100%"}},"cb1c25a9994e4a779cb7865c5dde8c21":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_a57c3430c5644bbe9fdaecf501820d2d","max":267954768,"min":0,"orientation":"horizontal","style":"IPY_MODEL_38147f643afb456c80bd1ca3d1350320","value":267954768}},"db9c1b9e509b426d9c85d43b6505ea65":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4b4e0fca180a46419101146429cf5fe1","placeholder":"​","style":"IPY_MODEL_288647bb4b004bdca84f0abb192f7439","value":" 268M/268M [00:01&lt;00:00, 147MB/s]"}},"fc7cbc82c8104549aec8c3ce5ecab5c1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0595f01f39ae4fe3824f51af12b04e84":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_37c1809691f94239ad7b4bd0ca9647d4","IPY_MODEL_cb1c25a9994e4a779cb7865c5dde8c21","IPY_MODEL_db9c1b9e509b426d9c85d43b6505ea65"],"layout":"IPY_MODEL_fc7cbc82c8104549aec8c3ce5ecab5c1"}}}}},"cells":[{"cell_type":"markdown","source":["<p style=\"align: center;\"><img src=\"https://static.tildacdn.com/tild6636-3531-4239-b465-376364646465/Deep_Learning_School.png\" width=\"400\"></p>\n","\n","# Глубокое обучение. Часть 2\n","# Домашнее задание по теме \"Механизм внимания\""],"metadata":{"id":"Ji8KtYOVGs8_"}},{"cell_type":"markdown","source":["Это домашнее задание проходит в формате peer-review. Это означает, что его будут проверять ваши однокурсники. Поэтому пишите разборчивый код, добавляйте комментарии и пишите выводы после проделанной работы.\n","\n","В этом задании вы будете решать задачу классификации математических задач по темам (многоклассовая классификация) с помощью Transformer.\n","\n","В качестве датасета возьмем датасет математических задач по разным темам. Нам необходим следующий файл:\n","\n","[Файл с классами](https://docs.google.com/spreadsheets/d/1IMRxByfg7gjoZ5i7rxvuNDvSrbdOJOc-/edit?usp=drive_link&ouid=104379615679964018037&rtpof=true&sd=true)"],"metadata":{"id":"UAr-M8_1GJ6W"}},{"cell_type":"markdown","source":["**Hint:** не перезаписывайте модели, которые вы получите на каждом из этапов этого дз. Они ещё понадобятся."],"metadata":{"id":"1fybMcmV0YRA"}},{"cell_type":"code","source":["from google.colab import output\n","output.enable_custom_widget_manager()\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NLcJan2ja75W","executionInfo":{"status":"ok","timestamp":1711989787521,"user_tz":-180,"elapsed":28621,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"a1aa0dbd-edd2-4af6-b2e1-b84a4316fe44"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["path_to_data = '/content/drive/MyDrive/Deep_Learning_MIPT_2/hw_transformers/data_problems.xlsx'"],"metadata":{"id":"TwHa12Sfa8B8","executionInfo":{"status":"ok","timestamp":1711989799342,"user_tz":-180,"elapsed":710,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","from tqdm.auto import tqdm\n","from nltk.tokenize import word_tokenize\n","from sklearn.model_selection import train_test_split\n","from sklearn.utils import shuffle\n","import nltk\n","\n","from collections import Counter\n","from typing import List\n","import string\n","\n","import random\n","\n","from transformers import DistilBertModel\n","\n","import seaborn\n","seaborn.set(palette='summer')"],"metadata":{"id":"B8Pk1bI0cL5h","executionInfo":{"status":"ok","timestamp":1711989809975,"user_tz":-180,"elapsed":10637,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","device"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"XoczSJWMUUhr","executionInfo":{"status":"ok","timestamp":1711989809977,"user_tz":-180,"elapsed":14,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"558be123-8aea-47bf-c9ad-afc8d0878f08"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'cpu'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["nltk.download('punkt')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qAHmTInJoOOR","executionInfo":{"status":"ok","timestamp":1711989811728,"user_tz":-180,"elapsed":1761,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"f9af1635-db49-449a-ee6f-18fdceaa1be1"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["init_df = pd.read_excel(path_to_data)\n","\n","print(f'init_df.shape = {init_df.shape}')\n","print(f'init_df.keys() = {init_df.keys()}')\n","\n","df = init_df.drop(columns=['Unnamed: 0'])\n","\n","df = df.rename(columns={'Задача': 'text', 'Тема': 'label'})"],"metadata":{"id":"nXJG_ysHccw-","executionInfo":{"status":"ok","timestamp":1711989812612,"user_tz":-180,"elapsed":889,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bc1cb960-3d3f-4d22-f46a-cb93792b3718"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["init_df.shape = (5273, 3)\n","init_df.keys() = Index(['Unnamed: 0', 'Задача', 'Тема'], dtype='object')\n"]}]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"TyHpjm52dAwg","executionInfo":{"status":"ok","timestamp":1711989812614,"user_tz":-180,"elapsed":25,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"6ed14374-22e9-4a3b-b155-0bbae25bd570"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                text  label\n","0  Между девятью планетами Солнечной системы введ...  Графы\n","1  В стране Цифра есть 9 городов с названиями 1, ...  Графы\n","2  В государстве 100 городов, и из каждого из них...  Графы\n","3  В классе 30 человек. Может ли быть так, что 9 ...  Графы\n","4  В городе Маленьком 15 телефонов. Можно ли их с...  Графы"],"text/html":["\n","  <div id=\"df-b07cbfbc-c15c-4526-b430-2288913aac01\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Между девятью планетами Солнечной системы введ...</td>\n","      <td>Графы</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>В стране Цифра есть 9 городов с названиями 1, ...</td>\n","      <td>Графы</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>В государстве 100 городов, и из каждого из них...</td>\n","      <td>Графы</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>В классе 30 человек. Может ли быть так, что 9 ...</td>\n","      <td>Графы</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>В городе Маленьком 15 телефонов. Можно ли их с...</td>\n","      <td>Графы</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b07cbfbc-c15c-4526-b430-2288913aac01')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b07cbfbc-c15c-4526-b430-2288913aac01 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b07cbfbc-c15c-4526-b430-2288913aac01');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-47b1ec27-27ed-408e-9ba4-ebc95c53fb69\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47b1ec27-27ed-408e-9ba4-ebc95c53fb69')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-47b1ec27-27ed-408e-9ba4-ebc95c53fb69 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5273,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4350,\n        \"samples\": [\n          \"\\u041d\\u0430 \\u0433\\u0440\\u0430\\u0444\\u0438\\u043a\\u0435 \\u043c\\u043d\\u043e\\u0433\\u043e\\u0447\\u043b\\u0435\\u043d\\u0430 \\u0441 \\u0446\\u0435\\u043b\\u044b\\u043c\\u0438 \\u043a\\u043e\\u044d\\u0444\\u0444\\u0438\\u0446\\u0438\\u0435\\u043d\\u0442\\u0430\\u043c\\u0438 \\u043e\\u0442\\u043c\\u0435\\u0447\\u0435\\u043d\\u044b \\u0434\\u0432\\u0435 \\u0442\\u043e\\u0447\\u043a\\u0438 \\u0441 \\u0446\\u0435\\u043b\\u044b\\u043c\\u0438 \\u043a\\u043e\\u043e\\u0440\\u0434\\u0438\\u043d\\u0430\\u0442\\u0430\\u043c\\u0438. \\r\\n\\u0414\\u043e\\u043a\\u0430\\u0436\\u0438\\u0442\\u0435, \\u0447\\u0442\\u043e \\u0435\\u0441\\u043b\\u0438 \\u0440\\u0430\\u0441\\u0441\\u0442\\u043e\\u044f\\u043d\\u0438\\u0435 \\u043c\\u0435\\u0436\\u0434\\u0443 \\u043d\\u0438\\u043c\\u0438 \\u2013 \\u0446\\u0435\\u043b\\u043e\\u0435 \\u0447\\u0438\\u0441\\u043b\\u043e, \\u0442\\u043e \\u0441\\u043e\\u0435\\u0434\\u0438\\u043d\\u044f\\u044e\\u0449\\u0438\\u0439 \\u0438\\u0445 \\u043e\\u0442\\u0440\\u0435\\u0437\\u043e\\u043a \\u043f\\u0430\\u0440\\u0430\\u043b\\u043b\\u0435\\u043b\\u0435\\u043d \\u043e\\u0441\\u0438 \\u0430\\u0431\\u0441\\u0446\\u0438\\u0441\\u0441. \",\n          \"\\u0412 \\u0442\\u0430\\u0431\\u043b\\u0438\\u0446\\u0443 n\\u00d7n \\u0437\\u0430\\u043f\\u0438\\u0441\\u0430\\u043d\\u044b n\\u00b2 \\u0447\\u0438\\u0441\\u0435\\u043b, \\u0441\\u0443\\u043c\\u043c\\u0430 \\u043a\\u043e\\u0442\\u043e\\u0440\\u044b\\u0445 \\u043d\\u0435\\u043e\\u0442\\u0440\\u0438\\u0446\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u0430. \\u0414\\u043e\\u043a\\u0430\\u0436\\u0438\\u0442\\u0435, \\u0447\\u0442\\u043e \\u043c\\u043e\\u0436\\u043d\\u043e \\u043f\\u0435\\u0440\\u0435\\u0441\\u0442\\u0430\\u0432\\u0438\\u0442\\u044c \\u0441\\u0442\\u043e\\u043b\\u0431\\u0446\\u044b \\u0442\\u0430\\u0431\\u043b\\u0438\\u0446\\u044b \\u0442\\u0430\\u043a, \\u0447\\u0442\\u043e \\u0441\\u0443\\u043c\\u043c\\u0430 n \\u0447\\u0438\\u0441\\u0435\\u043b \\u043f\\u043e \\u0434\\u0438\\u0430\\u0433\\u043e\\u043d\\u0430\\u043b\\u0438, \\u0438\\u0434\\u0443\\u0449\\u0435\\u0439 \\u0438\\u0437 \\u043b\\u0435\\u0432\\u043e\\u0433\\u043e \\u043d\\u0438\\u0436\\u043d\\u0435\\u0433\\u043e \\u0443\\u0433\\u043b\\u0430 \\u0432 \\u043f\\u0440\\u0430\\u0432\\u044b\\u0439 \\u0432\\u0435\\u0440\\u0445\\u043d\\u0438\\u0439, \\u0431\\u0443\\u0434\\u0435\\u0442 \\u043d\\u0435\\u043e\\u0442\\u0440\\u0438\\u0446\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u0430.\",\n          \"\\u0420\\u0435\\u0448\\u0438\\u0442\\u044c \\u0432 \\u0446\\u0435\\u043b\\u044b\\u0445 \\u0447\\u0438\\u0441\\u043b\\u0430\\u0445 \\u0443\\u0440\\u0430\\u0432\\u043d\\u0435\\u043d\\u0438\\u0435 \\u00a0 xy/z + xz/y + yz/x = 3.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"\\u0413\\u0440\\u0430\\u0444\\u044b\",\n          \"\\u0413\\u0435\\u043e\\u043c\\u0435\\u0442\\u0440\\u0438\\u044f\",\n          \"\\u0418\\u043d\\u0432\\u0430\\u0440\\u0438\\u0430\\u043d\\u0442\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["labels_vocab = list(set(df['label']))\n","label2ind = {char: i for i, char in enumerate(labels_vocab)}\n","ind2label = {i: char for char, i in label2ind.items()}"],"metadata":{"id":"X43n9AWPWBED","executionInfo":{"status":"ok","timestamp":1711989812614,"user_tz":-180,"elapsed":22,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["words = Counter()\n","proccessed_text_test_list = []\n","\n","for example in tqdm(df['text']):\n","    proccessed_text = example.lower().translate(str.maketrans(string.punctuation, ' '*len(string.punctuation)))\n","    proccessed_text_test_list.append(proccessed_text)\n","\n","    for word in word_tokenize(proccessed_text):\n","        words[word] += 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":219},"id":"eItnLGZAmzF9","executionInfo":{"status":"error","timestamp":1711990965188,"user_tz":-180,"elapsed":12,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"8a016b34-b6b1-47cc-e4bb-49d04f45beb5"},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'Counter' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-19d5c9ab3fcc>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mwords\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mproccessed_text_test_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mexample\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'text'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mproccessed_text\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranslate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaketrans\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstring\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpunctuation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m' '\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstring\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpunctuation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'Counter' is not defined"]}]},{"cell_type":"code","source":["index = 122\n","print(df['text'].iloc[index])\n","print(proccessed_text_test_list[index])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uZAf8PpAoq5r","executionInfo":{"status":"ok","timestamp":1711989815437,"user_tz":-180,"elapsed":30,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"13125f53-98cf-4981-98ed-98cae799c4a9"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Петя заметил, что у всех его 25 одноклассников различное число друзей в этом\r\n","классе. Сколько друзей у Пети? \n","петя заметил  что у всех его 25 одноклассников различное число друзей в этом\r\n","классе  сколько друзей у пети  \n"]}]},{"cell_type":"code","source":["words_df_idxs = np.arange(len(words))\n","words_df = pd.DataFrame(data=list(words.items()),columns=['key','val'],index=words_df_idxs)\n","words_df_sorted = words_df.sort_values(by=['val'], ascending=False)\n","words_df_sorted_reindexed = words_df_sorted.reset_index(drop=True)"],"metadata":{"id":"szQpczI7tFfb","executionInfo":{"status":"ok","timestamp":1711989815437,"user_tz":-180,"elapsed":28,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["words_df_sorted_reindexed.head(-5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"lSP2KKphtNhX","executionInfo":{"status":"ok","timestamp":1711989815438,"user_tz":-180,"elapsed":28,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"067da413-c7bd-4203-acf4-9ddec5eac5e4"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                key   val\n","0                 в  6087\n","1                 и  5750\n","2                на  4714\n","3               что  4265\n","4                по  3766\n","...             ...   ...\n","14475  пассажирском     1\n","14476     автомашин     1\n","14477   симпатичным     1\n","14478   симпатичных     1\n","14479           65b     1\n","\n","[14480 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-f6fb23ae-7a5a-44ab-9c93-cafe2f6a6249\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key</th>\n","      <th>val</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>в</td>\n","      <td>6087</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>и</td>\n","      <td>5750</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>на</td>\n","      <td>4714</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>что</td>\n","      <td>4265</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>по</td>\n","      <td>3766</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>14475</th>\n","      <td>пассажирском</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14476</th>\n","      <td>автомашин</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14477</th>\n","      <td>симпатичным</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14478</th>\n","      <td>симпатичных</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14479</th>\n","      <td>65b</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>14480 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6fb23ae-7a5a-44ab-9c93-cafe2f6a6249')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f6fb23ae-7a5a-44ab-9c93-cafe2f6a6249 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f6fb23ae-7a5a-44ab-9c93-cafe2f6a6249');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b8e307d9-0cb3-4e55-8961-966b651bb70b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b8e307d9-0cb3-4e55-8961-966b651bb70b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b8e307d9-0cb3-4e55-8961-966b651bb70b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"words_df_sorted_reindexed","summary":"{\n  \"name\": \"words_df_sorted_reindexed\",\n  \"rows\": 14485,\n  \"fields\": [\n    {\n      \"column\": \"key\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14485,\n        \"samples\": [\n          \"108240\",\n          \"219\",\n          \"\\u043f\\u043e\\u043b\\u0443\\u0447\\u0438\\u0432\\u0448\\u0438\\u0435\\u0441\\u044f\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"val\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 123,\n        \"min\": 1,\n        \"max\": 6087,\n        \"num_unique_values\": 317,\n        \"samples\": [\n          425,\n          37,\n          1013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["vocab = set(['<unk>', '<bos>', '<eos>', '<pad>'])\n","counter_threshold = 10\n","\n","for char, cnt in words.items():\n","    if cnt > counter_threshold:\n","        vocab.add(char)\n","\n","print(f'Размер словаря: {len(vocab)}')\n","\n","word2ind = {char: i for i, char in enumerate(vocab)}\n","ind2word = {i: char for char, i in word2ind.items()}"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AnHWnOhPofGK","executionInfo":{"status":"ok","timestamp":1711989815438,"user_tz":-180,"elapsed":24,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"6ad9a66e-6bd0-4ecc-a792-10a0bf55e812"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Размер словаря: 2289\n"]}]},{"cell_type":"code","source":["class WordDataset:\n","    def __init__(self, sentences):\n","        self.data = sentences\n","        self.unk_id = word2ind['<unk>']\n","        self.bos_id = word2ind['<bos>']\n","        self.eos_id = word2ind['<eos>']\n","        self.pad_id = word2ind['<pad>']\n","\n","    def __getitem__(self, idx: int) -> List[int]:\n","        processed_text = self.data.iloc[idx]['text'].lower().translate(str.maketrans(string.punctuation, ' '*len(string.punctuation)))\n","        tokenized_sentence = [self.bos_id]\n","        tokenized_sentence += [word2ind.get(word, self.unk_id) for word in word_tokenize(processed_text)]\n","        tokenized_sentence += [self.eos_id]\n","\n","        train_sample = {\n","            \"text\": tokenized_sentence,\n","            \"label\": label2ind[self.data.iloc[idx]['label']]\n","        }\n","\n","        return train_sample\n","\n","    def __len__(self) -> int:\n","        return len(self.data)"],"metadata":{"id":"zeQAeQLlsD6-","executionInfo":{"status":"ok","timestamp":1711989815439,"user_tz":-180,"elapsed":20,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["df_shuffled = shuffle(df)\n","df_train = df_shuffled[:int(len(df_shuffled)*0.8)]\n","df_test  = df_shuffled[int(len(df_shuffled)*0.8):]\n","\n","train_dataset = WordDataset(df_train)\n","eval_dataset = WordDataset(df_test)"],"metadata":{"id":"wyEmeQXz2i7J","executionInfo":{"status":"ok","timestamp":1711989815439,"user_tz":-180,"elapsed":19,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["index = 1\n","print(len(train_dataset[index]['text']))\n","print(train_dataset[index]['text'])\n","print(list(map(ind2word.get, train_dataset[index]['text'])))\n","print(train_dataset[index]['label'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IhfBP8E4EVPS","executionInfo":{"status":"ok","timestamp":1711989815439,"user_tz":-180,"elapsed":19,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"3a4cd59b-3c0f-49ec-f2b0-5926f8368bb1"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["42\n","[1569, 1705, 63, 1522, 782, 1522, 1991, 1522, 705, 535, 2184, 1797, 135, 1971, 1522, 2188, 23, 1522, 535, 1713, 1522, 1713, 782, 1522, 1713, 23, 1522, 1713, 63, 1522, 2188, 63, 1522, 1971, 1522, 782, 1522, 23, 1522, 1991, 1522, 328]\n","['<bos>', 'пусть', 'p', 'x', 'q', 'x', 'd', 'x', 'докажите', 'что', 'существуют', 'такие', 'многочлены', 'u', 'x', 'и', 'v', 'x', 'что', '<unk>', 'x', '<unk>', 'q', 'x', '<unk>', 'v', 'x', '<unk>', 'p', 'x', 'и', 'p', 'x', 'u', 'x', 'q', 'x', 'v', 'x', 'd', 'x', '<eos>']\n","2\n"]}]},{"cell_type":"code","source":["print(len(proccessed_text_test_list[index]))\n","print((proccessed_text_test_list[index]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k3qu7ox8DHwx","executionInfo":{"status":"ok","timestamp":1711989815989,"user_tz":-180,"elapsed":4,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"42b6c3ba-5e7a-4bac-d314-fe0cb72110d9"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["284\n","в стране цифра есть 9 городов с названиями 1  2  3  4  5  6  7  8  9  путешественник обнаружил  что два города соединены авиалинией в том и только в том случае  если двузначное число  составленное из цифр названий этих городов  делится на 3  можно ли добраться из города 1 в город 9  \n"]}]},{"cell_type":"code","source":["def collate_fn_with_padding(input_batch: List[List[int]], pad_id=word2ind['<pad>'], max_len=256) -> torch.Tensor:\n","    seq_lens = [len(x['text']) for x in input_batch]\n","    max_seq_len = min(max(seq_lens), max_len)\n","\n","    new_batch = []\n","    for sequence in input_batch:\n","        sequence['text'] = sequence['text'][:max_seq_len]\n","        for _ in range(max_seq_len - len(sequence['text'])):\n","            sequence['text'].append(pad_id)\n","\n","        new_batch.append(sequence['text'])\n","\n","    sequences = torch.LongTensor(new_batch).to(device)\n","    labels = torch.LongTensor([x['label'] for x in input_batch]).to(device)\n","\n","    new_batch = {\n","        'input_ids': sequences,\n","        'label': labels\n","    }\n","\n","    return new_batch"],"metadata":{"id":"jE3-7gPdS20_","executionInfo":{"status":"ok","timestamp":1711989816543,"user_tz":-180,"elapsed":3,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["batch_size = 32\n","train_dataloader = DataLoader(\n","    train_dataset, shuffle=True, collate_fn=collate_fn_with_padding, batch_size=batch_size)\n","\n","eval_dataloader = DataLoader(\n","    eval_dataset, shuffle=False, collate_fn=collate_fn_with_padding, batch_size=batch_size)"],"metadata":{"id":"PaNB7RsKDHze","executionInfo":{"status":"ok","timestamp":1711989818061,"user_tz":-180,"elapsed":2,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["for batch in train_dataloader:\n","    print(batch)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l3Y4ZVSrTMdx","executionInfo":{"status":"ok","timestamp":1711989822416,"user_tz":-180,"elapsed":1377,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"7f49f174-8131-4dda-ea82-8f5aa6464fcb"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["{'input_ids': tensor([[1569, 1981,  535,  ...,  549, 1203,  328],\n","        [1569, 1954, 2036,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1210,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1064, 2155,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1798,  ..., 1289, 1289, 1289],\n","        [1569,  581, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 2, 2, 2, 1, 3, 2, 3, 2, 4, 2, 2, 0, 2, 6, 2, 4, 6, 1, 2, 5, 1, 1, 3,\n","        1, 2, 6, 1, 2, 1, 1, 2])}\n","{'input_ids': tensor([[1569, 1862,  917,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  109,  845,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1067,   62,  ..., 1289, 1289, 1289],\n","        [1569,  324, 1650,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1818,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 1, 2, 2, 1, 2, 2, 3, 2, 0, 2, 1, 1, 2, 2, 3, 1, 0, 3, 2, 2, 2, 4,\n","        1, 6, 2, 2, 2, 2, 2, 1])}\n","{'input_ids': tensor([[1569,  109,  845,  ..., 1289, 1289, 1289],\n","        [1569, 1058, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1735, 1260,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  309, 1172,  ..., 1289, 1289, 1289],\n","        [1569, 2096, 1606,  ..., 1289, 1289, 1289],\n","        [1569, 1164,  193,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 2, 1, 2, 2, 6, 2, 6, 5, 2, 6, 2, 2, 2, 2, 6, 1, 2, 1, 2, 2, 6, 2, 1,\n","        5, 4, 2, 2, 1, 1, 1, 2])}\n","{'input_ids': tensor([[1569, 1325, 1976,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  895,  ..., 1289, 1289, 1289],\n","        [1569,  324, 1671,  ..., 1713,  193,  328],\n","        ...,\n","        [1569,  917, 2280,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289],\n","        [1569, 1862,  917,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 0, 3, 1, 0, 3, 2, 5, 5, 6, 2, 2, 2, 1, 2, 5, 2, 2, 0, 2, 1, 1, 5, 3,\n","        2, 2, 2, 1, 1, 1, 2, 2])}\n","{'input_ids': tensor([[1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569, 2217,  731,  ..., 1289, 1289, 1289],\n","        [1569,   40, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1722,  673,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 2, 2, 6, 3, 3, 1, 6, 2, 5, 2, 2, 1, 2, 2, 2, 3, 3, 1, 1, 2, 4, 2, 3,\n","        0, 4, 1, 3, 1, 3, 2, 5])}\n","{'input_ids': tensor([[1569, 1187,  585,  ..., 1289, 1289, 1289],\n","        [1569, 2184, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1705,  705,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1735, 1380,  ..., 1289, 1289, 1289],\n","        [1569, 1176, 1708,  ..., 1289, 1289, 1289],\n","        [1569,  192, 2213,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 0, 1, 3, 1, 2, 5, 1, 2, 5, 2, 6, 4, 2, 2, 2, 3, 1, 2, 4, 1, 1,\n","        0, 0, 2, 2, 1, 2, 4, 4])}\n","{'input_ids': tensor([[1569,  917, 1728,  ..., 1289, 1289, 1289],\n","        [1569, 1308, 1486,  ..., 1289, 1289, 1289],\n","        [1569,  762, 2170,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,   98,  195,  ..., 1289, 1289, 1289],\n","        [1569, 1862,   27,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 2, 6, 2, 2, 2, 1, 2, 0, 2, 6, 6, 2, 2, 2, 6, 2, 6, 1, 2, 2, 1, 1, 5,\n","        6, 1, 2, 1, 2, 2, 6, 2])}\n","{'input_ids': tensor([[1569,  707,  917,  ..., 1713,  908,  328],\n","        [1569, 2096,  705,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1030,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1064, 1618,  ..., 1289, 1289, 1289],\n","        [1569,  324, 1247,  ..., 1289, 1289, 1289],\n","        [1569,  322, 2225,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 6, 5, 2, 2, 2, 6, 0, 2, 2, 2, 2, 2, 5, 6, 5, 2, 2, 1, 3, 2, 2, 2, 2,\n","        2, 2, 2, 1, 5, 2, 2, 1])}\n","{'input_ids': tensor([[1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1735, 1260,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  129, 1187,  ..., 1870,  398, 1025],\n","        [1569, 1283,  917,  ..., 1289, 1289, 1289],\n","        [1569, 1222, 1486,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 2, 2, 1, 1, 2, 2, 2, 4, 2, 6, 2, 1, 2, 4, 2, 6, 2, 2, 2, 1, 3, 6, 1,\n","        2, 2, 2, 2, 2, 6, 2, 2])}\n","{'input_ids': tensor([[1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1245, 1830,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1764,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1606, 2114,  ..., 1289, 1289, 1289],\n","        [1569, 1210,  283,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 1, 5, 5, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 1, 2, 6, 2, 3, 2, 1, 2, 2,\n","        3, 5, 1, 3, 2, 2, 5, 5])}\n","{'input_ids': tensor([[1569,  421, 1708,  ...,  549, 1203,  328],\n","        [1569, 1713,   18,  ..., 1289, 1289, 1289],\n","        [1569,  193,  269,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2036,  309,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 2002,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 2, 2, 2, 1, 2, 2, 2, 2, 6, 6, 1, 5, 2, 1, 0, 1, 1, 4, 2, 3, 1, 5, 2,\n","        0, 5, 1, 2, 1, 2, 3, 2])}\n","{'input_ids': tensor([[1569,  324,  325,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  117,  ..., 1289, 1289, 1289],\n","        [1569, 1981,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917,  551,  ..., 1289, 1289, 1289],\n","        [1569, 2217, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1981,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 2, 6, 1, 2, 1, 2, 2, 2, 1, 0, 1, 2, 2, 0, 4, 0, 0, 2, 6, 5, 2, 2, 2,\n","        1, 2, 6, 1, 3, 1, 2, 6])}\n","{'input_ids': tensor([[1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1964, 1403,  ..., 1806, 1444,  328],\n","        ...,\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  917,  229,  ..., 1289, 1289, 1289],\n","        [1569, 1735, 1260,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 2, 2, 1, 4, 2, 1, 1, 2, 2, 1, 2, 6, 2, 1, 1, 2, 2, 2, 2, 1, 2, 6, 2,\n","        2, 5, 2, 2, 1, 2, 3, 5])}\n","{'input_ids': tensor([[1569, 1924, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1722, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289],\n","        [1569,  125, 1973,  ..., 1289, 1289, 1289],\n","        [1569, 1954, 1187,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 5, 2, 2, 2, 4, 5, 1, 6, 2, 2, 1, 2, 6, 1, 2, 2, 2, 4, 1, 2, 3, 2, 6,\n","        1, 2, 4, 2, 4, 0, 5, 1])}\n","{'input_ids': tensor([[1569,  408, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 2225,  469,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  896,  446,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 2010,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  415,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 1, 2, 2, 5, 4, 2, 0, 1, 6, 0, 1, 1, 2, 2, 2, 3, 2, 2, 6, 2, 2, 5, 6,\n","        5, 1, 4, 1, 5, 1, 0, 2])}\n","{'input_ids': tensor([[1569, 1177, 1957,  ..., 1289, 1289, 1289],\n","        [1569,  374,   86,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1110,  888,  ..., 1289, 1289, 1289],\n","        [1569, 1705,   63,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([0, 4, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 3, 2, 6, 6, 4, 2, 4, 2,\n","        1, 1, 1, 1, 2, 2, 2, 2])}\n","{'input_ids': tensor([[1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2280,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1315,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  328, 1289,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 1187,  ..., 1289, 1289, 1289],\n","        [1569, 1011,  947,  ..., 2118, 1637, 1789]]), 'label': tensor([2, 3, 2, 1, 2, 2, 1, 2, 4, 3, 1, 2, 0, 2, 6, 1, 3, 2, 1, 2, 4, 6, 2, 6,\n","        2, 3, 2, 2, 2, 5, 2, 4])}\n","{'input_ids': tensor([[1569,  309, 1172,  ..., 1289, 1289, 1289],\n","        [1569,  182, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,   46, 2239,  ..., 1289, 1289, 1289],\n","        [1569, 1667, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 2012, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 2, 1, 2, 6, 6, 2, 2, 2, 2, 5, 6, 1, 2, 4, 2, 2, 1, 4, 0, 2, 2, 2, 1,\n","        2, 2, 2, 2, 1, 2, 2, 5])}\n","{'input_ids': tensor([[1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1820,  515,  ..., 1289, 1289, 1289],\n","        [1569,  603, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 2, 2, 1, 2, 1, 2, 2, 3, 5, 2, 2, 3, 1, 2, 4, 5, 3, 2, 0, 3, 1, 0, 1,\n","        2, 1, 2, 4, 1, 4, 2, 2])}\n","{'input_ids': tensor([[1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569, 2096, 1119,  ..., 1289, 1289, 1289],\n","        [1569,  917,  408,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1447,  489,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 2191,  269,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 1, 5, 2, 1, 1, 5, 2, 0, 1, 2, 2, 2, 3, 1, 3, 2, 6, 2, 2, 1, 5, 1, 5,\n","        6, 6, 1, 2, 2, 4, 2, 1])}\n","{'input_ids': tensor([[1569, 1476, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1087, 2029,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1087,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2217, 2174,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  581, 2114,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 0, 0, 2, 2, 1, 2, 2, 2, 2, 5, 2, 2, 6, 1, 1, 1, 5, 5, 2, 2, 2, 2, 2,\n","        2, 4, 3, 5, 0, 1, 4, 2])}\n","{'input_ids': tensor([[1569, 1714, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1476,  163,  ..., 1289, 1289, 1289],\n","        [1569, 1283,  917,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,   97, 1296,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 5, 2, 2, 2, 1, 5, 1, 3, 2, 3, 5, 3, 1, 2, 1, 2, 2, 1, 2, 1, 1,\n","        5, 3, 6, 2, 1, 2, 2, 2])}\n","{'input_ids': tensor([[1569, 1072,  418,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  917,  551,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289],\n","        [1569,  230, 1269,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([0, 3, 2, 2, 4, 2, 6, 2, 2, 1, 1, 3, 2, 1, 2, 2, 2, 6, 3, 2, 1, 2, 3, 2,\n","        1, 5, 3, 1, 1, 2, 5, 1])}\n","{'input_ids': tensor([[1569,  852, 1136,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 2114,  ..., 1289, 1289, 1289],\n","        [1569, 1028, 1976,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1447, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2282,  ..., 1289, 1289, 1289],\n","        [1569,   40,  399,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 6, 2, 0, 2, 2, 6, 4, 5, 1, 2, 2, 2, 5, 2, 2, 2, 1, 5, 2, 3, 0, 2, 2,\n","        2, 2, 1, 2, 1, 1, 3, 4])}\n","{'input_ids': tensor([[1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1954, 1187,  ..., 1289, 1289, 1289],\n","        [1569,  109,  845,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  732, 1079,  ...,  549, 1203,  328],\n","        [1569, 1495,   37,  ..., 1289, 1289, 1289],\n","        [1569,  182, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 2, 1, 1, 5, 3, 2, 2, 2, 1, 3, 2, 2, 2, 2, 1, 5, 2, 2, 2, 2, 1, 5, 2,\n","        5, 5, 6, 2, 2, 4, 5, 2])}\n","{'input_ids': tensor([[1569,  373, 1522,  ..., 1289, 1289, 1289],\n","        [1569, 1263,  328,  ..., 1289, 1289, 1289],\n","        [1569, 1222, 1486,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2096,  328,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  337,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 2, 2, 5, 3, 2, 6, 6, 2, 2, 2, 2, 2, 1, 5, 2, 2, 1, 2, 1, 4, 2, 1, 4,\n","        2, 2, 2, 4, 2, 6, 2, 1])}\n","{'input_ids': tensor([[1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1713, 1713,  328],\n","        [1569, 1041, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  129, 1832,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 3, 2, 5, 2, 5, 5, 2, 6, 2, 1, 1, 1, 3, 6, 2, 2, 3, 3, 3, 1, 1,\n","        4, 2, 5, 1, 5, 3, 5, 5])}\n","{'input_ids': tensor([[1569, 1981,  535,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1716, 1674,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1028, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  322,  263,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 0, 4, 1, 2, 2, 2, 2, 1, 2, 4, 5, 2, 1, 5, 2, 1, 2, 5, 2, 4, 3,\n","        2, 2, 5, 1, 2, 2, 2, 6])}\n","{'input_ids': tensor([[1569, 1447, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289],\n","        [1569, 1722,  255,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1705,  309,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1979,  ..., 1289, 1289, 1289],\n","        [1569, 2036,  309,  ..., 1289, 1289, 1289]]), 'label': tensor([0, 0, 2, 5, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 3, 2,\n","        2, 0, 2, 2, 2, 2, 2, 2])}\n","{'input_ids': tensor([[1569, 1263, 1424,  ..., 1289, 1289, 1289],\n","        [1569,  917,  137,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  149, 1166,  ..., 1289, 1289, 1289],\n","        [1569, 1705, 1210,  ..., 1289, 1289, 1289],\n","        [1569, 1803,  917,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 3, 5, 2, 6, 4, 2, 2, 6, 2, 2, 5, 2, 0, 2, 1, 2, 1, 1, 1, 6, 0, 3, 2,\n","        2, 1, 0, 2, 2, 6, 6, 1])}\n","{'input_ids': tensor([[1569, 1110, 2029,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1979,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1308, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1522, 1346,  ..., 1289, 1289, 1289],\n","        [1569, 1263,  328,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 1, 2, 2, 2, 3, 2, 2, 3, 1, 1, 6, 1, 6, 1, 2, 3, 0, 2, 2, 1, 5, 2, 2,\n","        1, 2, 2, 2, 6, 6, 2, 6])}\n","{'input_ids': tensor([[1569,  324,  852,  ..., 1289, 1289, 1289],\n","        [1569, 1164, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  309,  885,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2177,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 1, 2, 2, 1, 3, 4, 2, 4, 3, 1, 6, 2, 2, 2, 2, 3, 6, 4, 2, 1, 2, 2, 4,\n","        2, 5, 2, 5, 1, 4, 3, 2])}\n","{'input_ids': tensor([[1569,  426, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  938,  ..., 1289, 1289, 1289],\n","        [1569, 1283,  917,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  322, 2225,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569,  129,  914,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 2, 3, 5, 1, 2, 2, 6, 2, 1, 4, 2, 2, 4, 4, 1, 1, 2, 2, 0, 2, 2,\n","        6, 6, 2, 2, 1, 2, 2, 0])}\n","{'input_ids': tensor([[1569, 1064, 1618,  ..., 1289, 1289, 1289],\n","        [1569,  374,   86,  ..., 1289, 1289, 1289],\n","        [1569, 1954, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1263,  705,  ..., 1289, 1289, 1289],\n","        [1569, 1274, 1037,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 4, 5, 2, 2, 2, 5, 1, 1, 2, 1, 3, 2, 2, 3, 2, 1, 2, 6, 1, 3, 6, 3, 2,\n","        2, 2, 2, 1, 4, 2, 2, 4])}\n","{'input_ids': tensor([[1569,  324, 1247,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  938,  ..., 1289, 1289, 1289],\n","        [1569, 1245,  513,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2184, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1067, 2135,  ..., 1289, 1289, 1289],\n","        [1569, 1705,   63,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 3, 2, 5, 1, 2, 4, 1, 6, 2, 1, 5, 2, 2, 4, 2, 1, 1, 4, 1, 4, 1,\n","        5, 0, 2, 6, 1, 2, 6, 2])}\n","{'input_ids': tensor([[1569, 1011,  947,  ...,  273, 1025,  432],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1222, 1486,  ..., 1289, 1289, 1289],\n","        [1569,  129,  193,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 1, 1, 6, 4, 2, 1, 3, 2, 2, 2, 6, 2, 6, 6, 2, 2, 1, 6, 6, 1, 2, 2, 2,\n","        6, 1, 4, 2, 6, 2, 2, 2])}\n","{'input_ids': tensor([[1569, 2096, 1713,  ..., 1289, 1289, 1289],\n","        [1569,   46,  137,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1274,  353,  ..., 1289, 1289, 1289],\n","        [1569,   40, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1283, 2241,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 2, 3, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 3, 0, 1, 2, 6, 5, 5, 2, 2, 2, 2,\n","        3, 2, 1, 1, 5, 4, 0, 2])}\n","{'input_ids': tensor([[1569, 1705,   63,  ..., 1289, 1289, 1289],\n","        [1569,   97, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1110, 2072,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1862,  917,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1210, 1704,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 0, 1, 1, 2, 2, 6, 2, 2, 5, 3, 2, 2, 1, 3, 2, 2, 2, 1, 4, 4, 2, 2, 1,\n","        2, 2, 6, 1, 5, 2, 2, 2])}\n","{'input_ids': tensor([[1569, 1705, 2024,  ..., 1289, 1289, 1289],\n","        [1569,  581,   56,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  852, 1136,  ..., 1289, 1289, 1289],\n","        [1569, 1172,  241,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1030,  ..., 1289, 1289, 1289]]), 'label': tensor([0, 2, 2, 3, 2, 6, 6, 4, 2, 6, 4, 2, 0, 5, 2, 2, 6, 2, 1, 2, 6, 4, 2, 6,\n","        1, 5, 2, 3, 2, 0, 2, 3])}\n","{'input_ids': tensor([[1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1172,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1827, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1862,  917,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2280,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 1, 6, 2, 2, 4, 2, 2, 4, 2, 2, 6, 2, 2, 2, 2, 2, 2, 2, 4, 5, 3, 2, 4,\n","        2, 2, 0, 2, 2, 2, 2, 5])}\n","{'input_ids': tensor([[1569, 1308, 1486,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1245, 1667,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1447,  977,  ..., 1289, 1289, 1289],\n","        [1569, 1086,  422,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2280,  ..., 1289, 1289, 1289]]), 'label': tensor([0, 2, 2, 2, 2, 2, 2, 1, 2, 6, 5, 1, 2, 1, 3, 1, 5, 1, 2, 1, 2, 1, 1, 4,\n","        1, 2, 2, 2, 2, 6, 0, 1])}\n","{'input_ids': tensor([[1569, 1447, 1979,  ..., 1289, 1289, 1289],\n","        [1569,  513, 1484,  ..., 1289, 1289, 1289],\n","        [1569, 1245,  555,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,   40,  946,  ..., 1289, 1289, 1289],\n","        [1569, 1119, 1713,  ..., 1289, 1289, 1289],\n","        [1569,   65,  938,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 6, 2, 2, 2, 2, 1, 2, 6, 6, 6, 5, 4, 3, 2, 5, 6, 2, 6, 3, 2, 4, 2, 2,\n","        0, 5, 3, 4, 2, 1, 6, 4])}\n","{'input_ids': tensor([[1569,  410, 1308,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1245, 1615,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1245,  513,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 2, 2, 2, 2, 6, 2, 2, 2, 4, 6, 2, 6, 2, 2, 1, 2, 1, 2, 1, 0, 5,\n","        5, 5, 2, 2, 4, 6, 2, 6])}\n","{'input_ids': tensor([[1569, 1713,  322,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  479, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 2114,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1030,  ..., 1289, 1289, 1289]]), 'label': tensor([0, 2, 1, 2, 2, 2, 2, 5, 5, 2, 6, 0, 2, 5, 4, 1, 1, 2, 1, 5, 0, 2, 6, 0,\n","        2, 2, 2, 1, 4, 0, 2, 1])}\n","{'input_ids': tensor([[1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 2259,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 2264,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2096, 1655,  ..., 1289, 1289, 1289],\n","        [1569,   80,  448,  ..., 1289, 1289, 1289],\n","        [1569,  193, 2100,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 2, 2, 2, 2, 2, 1, 5, 1, 4, 1, 2, 2, 2, 2, 2, 2, 2, 6, 3, 5, 3, 2, 2,\n","        2, 0, 3, 2, 2, 3, 4, 1])}\n","{'input_ids': tensor([[1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2280,  ..., 1289, 1289, 1289],\n","        [1569, 1187,  585,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 1, 2, 2, 2, 2, 2, 5, 1, 2, 1, 6, 2, 1, 1, 2, 1, 2, 2, 0, 5, 2, 2, 5,\n","        0, 2, 2, 2, 2, 2, 2, 1])}\n","{'input_ids': tensor([[1569, 1713, 1440,  ..., 1289, 1289, 1289],\n","        [1569,  917,  389,  ..., 1289, 1289, 1289],\n","        [1569, 2036,  309,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  705, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1011,  947,  ...,  549, 1203,  328],\n","        [1569,  117, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 4, 2, 5, 2, 1, 3, 3, 2, 4, 1, 2, 1, 2, 1, 2, 2, 4, 5, 2, 6, 2, 2, 1,\n","        3, 6, 1, 2, 6, 6, 1, 2])}\n","{'input_ids': tensor([[1569, 1245, 2029,  ..., 1289, 1289, 1289],\n","        [1569, 1705, 1176,  ..., 1289, 1289, 1289],\n","        [1569, 1247, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  192,  662,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 2, 2, 2, 1, 5, 4, 2, 2, 6, 2, 2, 5, 3, 1, 0, 6, 2, 2, 2, 1, 3, 1, 1,\n","        2, 2, 0, 2, 2, 2, 3, 4])}\n","{'input_ids': tensor([[1569, 1041, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1495, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2282,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1287, 1447,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1705,   63,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 1, 3, 0, 5, 4, 1, 1, 3, 3, 2, 2, 2, 5, 2, 1, 4, 1, 6, 3, 2, 1, 2, 3,\n","        2, 3, 1, 1, 2, 2, 2, 2])}\n","{'input_ids': tensor([[1569,  324,  633,  ..., 1289, 1289, 1289],\n","        [1569,  732, 1079,  ...,  549, 1203,  328],\n","        [1569, 1578, 1066,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2195,  193,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1983,  ..., 1289, 1289, 1289],\n","        [1569, 1557, 1849,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 4, 3, 1, 5, 1, 5, 2, 6, 4, 6, 1, 2, 2, 5, 2, 6, 2, 1, 2, 2, 2, 2, 2,\n","        5, 1, 6, 2, 2, 3, 1, 2])}\n","{'input_ids': tensor([[1569, 1981,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1981,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1722,  492,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2217,   39,  ..., 1289, 1289, 1289],\n","        [1569,  585, 1172,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 2, 2, 1, 5, 1, 5, 2, 0, 2, 5, 1, 4, 3, 1, 2, 2, 2, 3, 5, 2, 1, 5, 3,\n","        1, 1, 3, 5, 6, 6, 2, 2])}\n","{'input_ids': tensor([[1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1177, 1957,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 2010,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1447,  977,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 2114,  ..., 1289, 1289, 1289],\n","        [1569,   65,  938,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 3, 2, 1, 2, 1, 2, 1, 5, 1, 3, 2, 1, 1, 1, 5, 5, 2, 3, 2, 2, 2, 2, 2,\n","        2, 1, 1, 2, 5, 6, 2, 4])}\n","{'input_ids': tensor([[1569,  325,  543,  ..., 1289, 1289, 1289],\n","        [1569, 2096,  241,  ..., 1289, 1289, 1289],\n","        [1569, 1705,   63,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1945,   40,  ..., 1289, 1289, 1289],\n","        [1569, 1705, 1923,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 2, 2, 2, 1, 1, 0, 2, 2, 2, 3, 2, 2, 0, 2, 2, 2, 2, 6, 2, 2, 5, 2, 2,\n","        2, 2, 2, 5, 1, 5, 2, 2])}\n","{'input_ids': tensor([[1569,  917, 1696,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1210, 1704,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1234,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 0, 2, 1, 1, 1, 2, 4, 4, 3, 2, 2, 2, 6, 1, 0, 2, 3, 2, 5, 2, 2, 2, 4,\n","        4, 1, 1, 2, 1, 1, 0, 2])}\n","{'input_ids': tensor([[1569,  513,  461,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2280,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  937, 2177,  ..., 1330,  760, 1827],\n","        [1569, 1011,  947,  ..., 1804, 1713, 2188],\n","        [1569, 1447, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 3, 4, 6, 5, 5, 2, 2, 1, 1, 2, 4, 1, 2, 1, 2, 4, 1, 2, 6, 3, 2, 2,\n","        2, 1, 2, 4, 1, 4, 4, 1])}\n","{'input_ids': tensor([[1569,  129,  535,  ..., 1289, 1289, 1289],\n","        [1569,  603,  757,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917,  199,  ..., 1289, 1289, 1289],\n","        [1569, 2114, 2036,  ..., 1289, 1289, 1289],\n","        [1569,  503, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 3, 1, 2, 1, 1, 0, 1, 5, 2, 2, 6, 1, 5, 3, 1, 3, 0, 1, 2, 5, 2, 5, 3,\n","        2, 1, 1, 6, 0, 4, 2, 3])}\n","{'input_ids': tensor([[1569,  322, 2225,  ..., 1289, 1289, 1289],\n","        [1569,  581, 1944,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1785,  ..., 1011,  947, 2274],\n","        ...,\n","        [1569,  193, 2230,  ..., 1289, 1289, 1289],\n","        [1569,  917,  199,  ..., 1289, 1289, 1289],\n","        [1569, 1954, 1187,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 2, 4, 1, 2, 2, 1, 2, 1, 2, 4, 2, 0, 1, 2, 1, 2, 6, 3, 2, 6, 3, 2, 4,\n","        2, 2, 1, 3, 2, 3, 4, 2])}\n","{'input_ids': tensor([[1569, 1263, 1981,  ..., 1289, 1289, 1289],\n","        [1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569, 1705,  315,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  322, 2225,  ..., 1289, 1289, 1289],\n","        [1569, 2217, 2225,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 4, 2, 3, 4, 1, 1, 2, 2, 2, 2, 4, 2, 5, 2, 5, 2, 0, 5, 2, 4, 5, 2, 5,\n","        2, 6, 2, 1, 2, 2, 2, 2])}\n","{'input_ids': tensor([[1569, 2096,  705,  ..., 1289, 1289, 1289],\n","        [1569,  581, 2114,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2096, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1945,   40,  ..., 1289, 1289, 1289],\n","        [1569, 1380, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 2, 2, 3, 1, 4, 1, 6, 2, 2, 1, 6, 0, 1, 2, 6, 3, 1, 4, 2, 6, 2, 4, 2,\n","        3, 1, 1, 2, 0, 1, 5, 2])}\n","{'input_ids': tensor([[1569, 1222, 1486,  ..., 1289, 1289, 1289],\n","        [1569,  109,  845,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2184, 1486,  ..., 1289, 1289, 1289],\n","        [1569,  917,  428,  ..., 1289, 1289, 1289],\n","        [1569, 1287, 1447,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 1, 4, 1, 0, 2, 4, 2, 2, 2, 2, 2, 2, 5, 5, 1, 1, 2, 0, 1, 2, 2, 3, 2,\n","        6, 2, 2, 2, 1, 2, 1, 0])}\n","{'input_ids': tensor([[1569, 2044, 2155,  ..., 1289, 1289, 1289],\n","        [1569, 1308, 1486,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  324, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  109,  845,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 1104,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 2, 2, 0, 1, 2, 5, 2, 2, 1, 5, 1, 0, 2, 5, 2, 6, 2, 2, 2, 2, 6,\n","        1, 4, 2, 0, 2, 4, 1, 2])}\n","{'input_ids': tensor([[1569, 1283,  917,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  814,  549,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569,  917,  819,  ..., 1289, 1289, 1289],\n","        [1569,  953,  917,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 4, 1, 1, 2, 2, 2, 2, 4, 1, 2, 2, 2, 2, 1, 4, 2, 1, 2, 1, 5, 2, 4,\n","        6, 2, 2, 0, 1, 1, 0, 2])}\n","{'input_ids': tensor([[1569,  249, 2239,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2280,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917,  551,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  324,  325,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 3, 1, 1, 2, 2, 3, 6, 0, 6, 6, 2, 2, 4, 6, 6, 5, 2, 4, 0, 2, 6, 4, 2,\n","        6, 2, 2, 2, 2, 1, 5, 4])}\n","{'input_ids': tensor([[1569, 2096,  705,  ..., 1289, 1289, 1289],\n","        [1569, 1283, 1067,  ..., 1289, 1289, 1289],\n","        [1569,  322, 2225,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1164, 1832,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1714,  ..., 1289, 1289, 1289],\n","        [1569,  324, 1719,  ..., 1289, 1289, 1289]]), 'label': tensor([0, 2, 6, 5, 5, 1, 2, 5, 4, 2, 2, 2, 6, 4, 2, 2, 5, 6, 6, 2, 3, 4, 4, 1,\n","        6, 3, 3, 2, 2, 2, 2, 4])}\n","{'input_ids': tensor([[1569,  721, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  581, 2114,  ..., 1289, 1289, 1289],\n","        [1569, 1954, 1187,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  204, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1827,  341,  ..., 1289, 1289, 1289],\n","        [1569, 2096, 1222,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 2, 2, 2, 1, 1, 2, 1, 5, 2, 1, 1, 1, 2, 6, 2, 2, 6, 1, 1, 1, 4, 2, 2,\n","        6, 1, 1, 5, 2, 2, 2, 3])}\n","{'input_ids': tensor([[1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1606,  728,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  895,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  324,  325,  ...,   65, 1804,  888],\n","        [1569, 1417, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 2, 5, 6, 6, 1, 1, 4, 5, 1, 2, 2, 5, 1, 2, 2, 2, 3, 2, 6, 6, 5, 6, 4,\n","        0, 1, 1, 6, 5, 4, 4, 5])}\n","{'input_ids': tensor([[1569, 1713,  917,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1238,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1263,   40,  ..., 1289, 1289, 1289],\n","        [1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 5, 2, 2, 6, 1, 1, 2, 2, 1, 5, 0, 1, 2, 2, 0, 6, 2, 2, 5, 4, 1, 2,\n","        4, 2, 2, 6, 2, 1, 4, 2])}\n","{'input_ids': tensor([[1569,  581, 2274,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1160,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1939, 1555, 2188],\n","        ...,\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2280,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 0, 4, 4, 5, 1, 0, 3, 2, 3, 1, 2, 5, 6, 4, 2, 0, 2, 3, 1, 2, 2, 2, 2,\n","        3, 2, 2, 1, 1, 2, 5, 3])}\n","{'input_ids': tensor([[1569,  917, 1608,  ..., 1289, 1289, 1289],\n","        [1569, 1245, 2036,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 2114,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 5, 1, 2, 2, 5, 6, 3, 2, 2, 1, 3, 5, 1, 2, 2, 2, 2, 2, 4, 2, 1, 5, 1,\n","        2, 2, 4, 5, 2, 0, 2, 1])}\n","{'input_ids': tensor([[1569, 1308, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 2081,  ..., 1289, 1289, 1289],\n","        [1569, 1862,  917,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1722,  673,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1617,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1005,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 5, 2, 1, 0, 0, 2, 2, 2, 1, 5, 2, 6, 2, 2, 1, 2, 3, 2, 2, 2, 2,\n","        2, 6, 2, 2, 0, 2, 6, 2])}\n","{'input_ids': tensor([[1569, 1447,  895,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 2191,  ..., 1289, 1289, 1289],\n","        [1569, 1245,  513,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1722,  835,  ..., 1903,  415,  328],\n","        [1569, 2114,  399,  ..., 1289, 1289, 1289],\n","        [1569,  472, 1086,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 2, 6, 2, 2, 4, 2, 3, 1, 2, 2, 2, 1, 3, 1, 2, 2, 2, 5, 6, 2, 3,\n","        6, 1, 2, 2, 2, 6, 5, 5])}\n","{'input_ids': tensor([[1569, 2184, 1486,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1979,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  192,  193,  ..., 1289, 1289, 1289],\n","        [1569,  917,  857,  ..., 1289, 1289, 1289],\n","        [1569, 1245,  309,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 2, 3, 4, 2, 1, 2, 2, 4, 2, 2, 1, 2, 6, 2, 1, 4, 2, 0, 3, 3, 3, 0, 2,\n","        2, 4, 3, 1, 2, 2, 1, 2])}\n","{'input_ids': tensor([[1569, 1447,  895,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1979,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2282,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1030,  ..., 1289, 1289, 1289],\n","        [1569, 1164,  527,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 5, 1, 1, 4, 2, 0, 2, 1, 2, 2, 1, 2, 2, 5, 1, 2, 5, 1, 4, 2, 4, 2, 6,\n","        2, 3, 0, 5, 2, 4, 1, 1])}\n","{'input_ids': tensor([[1569, 1722,  461,  ..., 1289, 1289, 1289],\n","        [1569, 1827,  341,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1735, 1578,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1979,  ..., 1289, 1289, 1289],\n","        [1569,  109,  845,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 1, 0, 0, 1, 2, 4, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 6, 2, 2,\n","        2, 2, 2, 6, 2, 2, 2, 1])}\n","{'input_ids': tensor([[1569, 1094,  325,  ..., 1289, 1289, 1289],\n","        [1569, 1827,  341,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1308, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 2195, 1358,  ..., 1289, 1289, 1289]]), 'label': tensor([0, 0, 2, 1, 1, 2, 1, 0, 2, 5, 2, 2, 2, 1, 4, 4, 4, 2, 1, 2, 2, 2, 2, 2,\n","        5, 1, 3, 1, 1, 3, 3, 2])}\n","{'input_ids': tensor([[1569, 2217, 2225,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1650,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917, 2177,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  585,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 4, 0, 1, 2, 2, 2, 5, 2, 1, 2, 5, 2, 6, 6, 2, 2, 2, 0, 0, 2, 1, 2, 2,\n","        1, 6, 1, 2, 2, 1, 1, 2])}\n","{'input_ids': tensor([[1569, 1447, 1041,  ..., 1289, 1289, 1289],\n","        [1569, 1245, 2029,  ..., 1289, 1289, 1289],\n","        [1569, 1263,  705,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1263, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 2184, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1308,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 6, 6, 2, 5, 6, 2, 2, 1, 6, 2, 2, 2, 6, 4, 6, 3, 1, 2, 3, 2, 2, 4, 2,\n","        2, 2, 2, 1, 1, 2, 2, 1])}\n","{'input_ids': tensor([[1569,  328, 1289,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1725,  ..., 1289, 1289, 1289],\n","        [1569, 1308, 1486,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917,  230,  ..., 1289, 1289, 1289],\n","        [1569, 1449, 1486,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 1, 2, 2, 6, 4, 2, 2, 2, 3, 5, 1, 2, 1, 0, 2, 2, 2, 5, 3, 3, 1, 2, 0,\n","        5, 6, 0, 6, 2, 1, 1, 2])}\n","{'input_ids': tensor([[1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 2114,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  938,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2216, 1901,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1222,  ..., 1289, 1289, 1289],\n","        [1569, 1945, 1501,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 5, 1, 2, 2, 2, 3, 2, 2, 2, 2, 2, 6, 1, 2, 2, 2, 1, 2, 2, 3, 2, 4,\n","        6, 3, 2, 5, 2, 1, 3, 2])}\n","{'input_ids': tensor([[1569, 1606, 1944,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  137,  ..., 1289, 1289, 1289],\n","        [1569,  109,  845,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1448,  165,  ..., 1289, 1289, 1289],\n","        [1569, 1735, 1260,  ..., 1289, 1289, 1289],\n","        [1569, 1705,  309,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 1, 1, 5, 2, 2, 2, 1, 5, 6, 0, 1, 1, 1, 1, 5, 2, 0, 2, 1, 6, 6, 6, 3,\n","        2, 1, 2, 1, 2, 6, 0, 2])}\n","{'input_ids': tensor([[1569, 1447, 2002,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289],\n","        [1569,  162, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  917,  857,  ..., 1289, 1289, 1289],\n","        [1569, 1722, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([0, 0, 2, 6, 2, 1, 1, 2, 3, 4, 2, 1, 6, 1, 1, 4, 6, 3, 2, 1, 0, 3, 2, 5,\n","        0, 6, 2, 2, 2, 6, 1, 1])}\n","{'input_ids': tensor([[1569, 1735, 2063,  ..., 1289, 1289, 1289],\n","        [1569, 1380, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  503, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,   97, 1147,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  477,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([0, 1, 1, 3, 0, 2, 2, 2, 2, 2, 4, 0, 2, 1, 1, 1, 4, 4, 2, 2, 6, 2, 2, 2,\n","        6, 2, 1, 2, 2, 5, 5, 3])}\n","{'input_ids': tensor([[1569, 1447, 2239,  ..., 1289, 1289, 1289],\n","        [1569, 1735, 1293,  ..., 1289, 1289, 1289],\n","        [1569, 1572, 1486,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1606,   56,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 1438,  ..., 1289, 1289, 1289],\n","        [1569, 1482, 2114,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 0, 2, 0, 2, 3, 2, 4, 3, 0, 3, 2, 2, 3, 1, 2, 0, 6, 2, 2, 5, 2, 6, 2,\n","        2, 2, 2, 4, 6, 2, 2, 1])}\n","{'input_ids': tensor([[1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1308, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 2188,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 5, 2, 5, 5, 5, 1, 1, 3, 2, 4, 4, 2, 2, 2, 1, 4, 2, 2, 4, 1, 6, 0, 1,\n","        2, 0, 1, 3, 1, 2, 0, 1])}\n","{'input_ids': tensor([[1569,  322,  498,  ..., 1289, 1289, 1289],\n","        [1569, 1263,  705,  ..., 1289, 1289, 1289],\n","        [1569, 1341,  585,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917, 1818,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1263,  322,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 1, 4, 2, 4, 1, 6, 2, 4, 2, 1, 2, 2, 5, 2, 1, 2, 2, 2, 4, 2, 3,\n","        2, 3, 2, 2, 2, 1, 2, 2])}\n","{'input_ids': tensor([[1569, 2217,  223,  ..., 1289, 1289, 1289],\n","        [1569,  324,  325,  ..., 1289, 1289, 1289],\n","        [1569,  410, 2156,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917, 2083,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 2178,  ..., 1289, 1289, 1289],\n","        [1569, 2096,  917,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 4, 2, 2, 6, 6, 2, 2, 4, 6, 2, 1, 2, 2, 2, 4, 0, 1, 0, 2, 1, 2, 4, 2,\n","        3, 2, 2, 2, 2, 2, 3, 5])}\n","{'input_ids': tensor([[1569, 1447, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1705, 1288,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1650,   82,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 0, 2, 0, 1, 6, 2, 2, 2, 1, 2, 1, 6, 2, 2, 4, 2, 2, 1, 2, 2, 2, 4, 1,\n","        3, 6, 1, 5, 2, 2, 1, 1])}\n","{'input_ids': tensor([[1569, 1705, 1210,  ..., 1289, 1289, 1289],\n","        [1569,  705, 1713,  ..., 1289, 1289, 1289],\n","        [1569,   46,  137,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2265,  ..., 1289, 1289, 1289],\n","        [1569,  129, 1495,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 1, 5, 3, 3, 3, 2, 2, 2, 6, 1, 2, 2, 5, 3, 2, 2, 4, 6, 5, 2, 2, 1,\n","        2, 2, 2, 1, 3, 2, 4, 2])}\n","{'input_ids': tensor([[1569, 2242, 1274,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1749,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ...,   40,  752, 2174],\n","        ...,\n","        [1569, 1713,  634,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 2, 2, 2, 2, 2, 0, 5, 2, 1, 2, 3, 2, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2,\n","        5, 2, 2, 2, 6, 1, 0, 5])}\n","{'input_ids': tensor([[1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 1187,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 2114,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  109,  845,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  325,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 1, 2, 5, 6, 1, 2, 3, 3, 2, 1, 6, 5, 2, 2, 1, 4, 5, 2, 2, 3, 3, 2, 2,\n","        2, 2, 2, 2, 1, 1, 2, 0])}\n","{'input_ids': tensor([[1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569, 2184, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1862,  917,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1283,  917,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 2, 2, 5, 3, 6, 3, 2, 1, 6, 2, 1, 2, 2, 2, 5, 2, 4, 1, 2, 6, 2, 2, 3,\n","        2, 1, 4, 5, 1, 2, 5, 2])}\n","{'input_ids': tensor([[1569, 1263,  917,  ..., 1289, 1289, 1289],\n","        [1569, 1981,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1245,   74,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917, 1867,  ..., 1289, 1289, 1289],\n","        [1569, 2096, 1655,  ..., 1289, 1289, 1289],\n","        [1569, 1263,  917,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 0, 0, 1, 2, 2, 2, 2, 4, 2, 2, 6, 2, 2, 2, 3, 2, 1, 4, 4, 2, 2, 2,\n","        3, 1, 1, 4, 3, 2, 1, 1])}\n","{'input_ids': tensor([[1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  549, 1172,  ..., 1289, 1289, 1289],\n","        [1569, 1862,  917,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1447, 1978,  ..., 1289, 1289, 1289],\n","        [1569, 1245,  135,  ..., 1289, 1289, 1289],\n","        [1569,  129, 1187,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 4, 1, 2, 4, 5, 4, 6, 4, 2, 3, 2, 5, 2, 3, 2, 3, 3, 2, 2, 1, 6,\n","        1, 2, 2, 5, 0, 4, 2, 0])}\n","{'input_ids': tensor([[1569, 1447, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1308, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1263,  705,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2117,   40,  ..., 1289, 1289, 1289],\n","        [1569, 1827, 1125,  ..., 1289, 1289, 1289],\n","        [1569, 1705, 1210,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 4, 1, 1, 0, 4, 5, 2, 2, 2, 3, 3, 2, 2, 2, 4, 1, 2, 2, 3, 4, 1,\n","        1, 2, 2, 5, 1, 5, 2, 6])}\n","{'input_ids': tensor([[1569, 1606,   56,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1072,  176,  ...,  873, 1932,   36],\n","        ...,\n","        [1569,  125,  585,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  636,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1728,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 0, 4, 3, 6, 3, 2, 2, 5, 2, 2, 1, 2, 1, 1, 2, 1, 4, 0, 2, 2, 2, 2, 2,\n","        1, 1, 2, 6, 0, 2, 2, 2])}\n","{'input_ids': tensor([[1569,  193, 2100,  ..., 1289, 1289, 1289],\n","        [1569,  917,  705,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1210,  283,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1210,  283,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 0, 1, 3, 2, 1, 2, 5, 2, 5, 2, 5, 5, 6, 1, 2, 2, 2, 1, 0, 2, 2, 0, 3,\n","        1, 2, 2, 3, 6, 2, 2, 2])}\n","{'input_ids': tensor([[1569, 1713,  581,  ..., 1289, 1289, 1289],\n","        [1569, 1187,  585,  ..., 1289, 1289, 1289],\n","        [1569,  997, 1849,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  784,   40,  ..., 1289, 1289, 1289],\n","        [1569,  705, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1234,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 1, 4, 2, 2, 2, 5, 6, 1, 6, 2, 3, 1, 0, 5, 1, 2, 2, 1, 2, 5, 1, 2,\n","        2, 1, 1, 1, 4, 5, 2, 2])}\n","{'input_ids': tensor([[1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  410,  946,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2265,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  581, 2114,  ..., 1289, 1289, 1289],\n","        [1569,  549, 1814,  ..., 1289, 1289, 1289],\n","        [1569, 1714, 1486,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 5, 2, 4, 6, 2, 2, 2, 6, 2, 2, 2, 4, 0, 5, 1, 2, 1, 4, 2, 1, 5, 2,\n","        1, 2, 6, 2, 2, 6, 2, 2])}\n","{'input_ids': tensor([[1569,  917, 2280,  ..., 1289, 1289, 1289],\n","        [1569, 2191,  269,  ..., 1289, 1289, 1289],\n","        [1569, 1447,  537,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1705, 2036,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1798,  ..., 1289, 1289, 1289],\n","        [1569, 1820, 1797,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 5, 2, 3, 2, 2, 5, 2, 5, 1, 0, 1, 2, 1, 4, 5, 1, 4, 2, 2, 3, 3, 2, 2,\n","        1, 3, 6, 4, 4, 2, 2, 6])}\n","{'input_ids': tensor([[1569, 2036,  309,  ..., 1289, 1289, 1289],\n","        [1569,  322, 2225,  ..., 1289, 1289, 1289],\n","        [1569, 1245, 1793,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1827,  938,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  581,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1979,  ..., 1713, 2066,  328]]), 'label': tensor([2, 2, 5, 2, 1, 2, 2, 6, 2, 4, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 3,\n","        2, 1, 2, 2, 2, 2, 2, 2])}\n","{'input_ids': tensor([[1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1217,  ..., 1289, 1289, 1289],\n","        [1569, 1283, 1067,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1283, 1067,  ..., 1289, 1289, 1289],\n","        [1569, 2096, 1704,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 3, 2, 1, 2, 0, 2, 1, 4, 1, 1, 1, 1, 5, 2, 5, 0, 6, 4, 2, 2, 3, 5, 1,\n","        0, 2, 5, 3, 4, 1, 2, 2])}\n","{'input_ids': tensor([[1569, 1606,   56,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1245,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1979,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2184, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1659,  ..., 1289, 1289, 1289],\n","        [1569,  117, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 5, 5, 2, 1, 1, 2, 2, 1, 3, 2, 2, 2, 1, 4, 1, 2, 2, 2, 1, 1, 5, 2, 1,\n","        4, 0, 5, 6, 2, 2, 2, 6])}\n","{'input_ids': tensor([[1569, 1293, 1700,  ..., 1289, 1289, 1289],\n","        [1569, 2216,  345,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 2239,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1447,  ..., 1289, 1289, 1289],\n","        [1569, 1800, 1486,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 0, 2, 6, 3, 2, 2, 4, 5, 1, 5, 2, 2, 2, 3, 4, 5, 2, 2, 2, 5, 3, 2, 1,\n","        2, 2, 2, 1, 2, 3, 2, 1])}\n","{'input_ids': tensor([[1569,  328, 1289,  ..., 1289, 1289, 1289],\n","        [1569,  917,  322,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  585,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1713,  990,  ..., 1289, 1289, 1289],\n","        [1569, 1283,  917,  ..., 1289, 1289, 1289],\n","        [1569, 1722, 1596,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 2, 2, 6, 2, 1, 4, 4, 2, 0, 4, 4, 2, 1, 1, 2, 2, 4, 2, 2, 5, 2, 1, 2,\n","        5, 4, 6, 2, 2, 2, 2, 2])}\n","{'input_ids': tensor([[1569,  917, 2280,  ..., 1191,  591,  328],\n","        [1569, 2114, 2036,  ..., 1289, 1289, 1289],\n","        [1569, 1283, 1067,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1222, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1344,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 2114,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 2, 2, 2, 2, 2, 1, 2, 1, 5, 1, 2, 0, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2,\n","        4, 2, 1, 2, 4, 3, 2, 2])}\n","{'input_ids': tensor([[1569,  705, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  129, 1495,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 2114,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1447, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917,  938,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 1, 2, 2, 2, 2, 1, 5, 2, 1, 1, 2, 3, 1, 1, 2, 3, 4, 1, 2, 1, 3, 3, 2,\n","        2, 2, 2, 2, 6, 3, 5, 2])}\n","{'input_ids': tensor([[1569, 1344, 1706,  ..., 1289, 1289, 1289],\n","        [1569, 2096,  125,  ..., 1289, 1289, 1289],\n","        [1569, 1705,   63,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2096,  322,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1328,  ..., 1289, 1289, 1289],\n","        [1569, 1287, 1447,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 2, 6, 2, 2, 2, 0, 1, 2, 2, 1, 2, 2, 4, 2, 2, 5, 1, 2, 2, 1, 6, 1, 5,\n","        5, 5, 6, 1, 2, 1, 0, 3])}\n","{'input_ids': tensor([[1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  535,  ..., 1289, 1289, 1289],\n","        [1569,  917,  328,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1713,   40,  ..., 1289, 1289, 1289],\n","        [1569,  125, 2114,  ..., 1289, 1289, 1289],\n","        [1569, 1283, 1067,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 6, 1, 2, 1, 1, 4, 2, 6, 1, 2, 3, 1, 2, 3, 5, 2, 1, 2, 2, 2, 1, 2,\n","        1, 2, 1, 4, 5, 2, 2, 6])}\n","{'input_ids': tensor([[1569,  917, 1655,  ..., 1289, 1289, 1289],\n","        [1569,   90, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  581, 2114,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1110,   98,  ..., 1289, 1289, 1289],\n","        [1569,  374, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 1, 2, 6, 2, 1, 2, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 4, 1, 2, 2, 1, 5, 2,\n","        2, 1, 5, 2, 2, 6, 2, 6])}\n","{'input_ids': tensor([[1569,  324,  633,  ..., 1289, 1289, 1289],\n","        [1569, 1705,   63,  ..., 1289, 1289, 1289],\n","        [1569,  581, 2114,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  581, 2114,  ..., 1289, 1289, 1289],\n","        [1569,   40, 1049,  ..., 1289, 1289, 1289],\n","        [1569, 2096, 1655,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 2, 2, 4, 4, 1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 6, 6, 3,\n","        2, 2, 6, 1, 1, 2, 3, 5])}\n","{'input_ids': tensor([[1569,  917, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  322, 2225,  ..., 1289, 1289, 1289],\n","        [1569, 1442, 1048,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1713, 1690,  ..., 1289, 1289, 1289],\n","        [1569, 1705,  193,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 2, 2, 2, 2, 2, 6, 2, 2, 1, 2, 2, 4, 2, 2, 2, 1, 2, 2, 2, 4, 2, 2, 2,\n","        1, 5, 0, 5, 2, 1, 1, 2])}\n","{'input_ids': tensor([[1569, 1064,   40,  ..., 1289, 1289, 1289],\n","        [1569,   40,  903,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2280,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 1618,  ..., 1289, 1289, 1289],\n","        [1569, 2063, 1929,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 1, 3, 5, 2, 0, 1, 2, 2, 5, 4, 2, 5, 2, 2, 2, 4, 2, 2, 4, 6, 3, 5,\n","        3, 2, 2, 6, 2, 2, 2, 5])}\n","{'input_ids': tensor([[1569, 2001, 1093,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1344,  ..., 1289, 1289, 1289],\n","        [1569, 2184, 1486,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 2276,  895,  ..., 1289, 1289, 1289],\n","        [1569, 2184, 1486,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 3, 2, 2, 2, 2, 0, 1, 5, 6, 2, 5, 1, 2, 4, 6, 2, 1, 3, 2, 0, 2, 6, 2,\n","        1, 2, 2, 2, 1, 6, 1, 2])}\n","{'input_ids': tensor([[1569,  926,   55,  ..., 1289, 1289, 1289],\n","        [1569,  410, 1308,  ..., 1289, 1289, 1289],\n","        [1569,   74, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1417, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1222, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 1, 5, 6, 2, 1, 2, 2, 2, 1, 2, 2, 6, 1, 2, 1, 0, 2, 2, 1, 6, 3, 2, 2,\n","        1, 3, 2, 2, 0, 4, 1, 1])}\n","{'input_ids': tensor([[1569, 1827,  341,  ..., 1289, 1289, 1289],\n","        [1569, 1713,  501,  ..., 1289, 1289, 1289],\n","        [1569, 2038, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  917,  428,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 6, 2, 5, 2, 2, 2, 2, 2, 2, 3, 1, 3, 2, 2, 2, 5, 2, 5, 1, 2, 4, 2,\n","        6, 1, 2, 1, 5, 2, 2, 3])}\n","{'input_ids': tensor([[1569, 1447,   20,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1909, 1704,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1164, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1028,  958,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1030,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 1, 1, 2, 1, 2, 2, 1, 5, 1, 2, 5, 2, 2, 1, 6, 2, 1, 6, 2, 2, 4, 1, 4,\n","        6, 4, 2, 3, 1, 1, 3, 2])}\n","{'input_ids': tensor([[1569,  917,  328,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1979,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917,   11,  ..., 1289, 1289, 1289],\n","        [1569, 1422,  543,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 1, 1, 3, 2, 2, 5, 2, 3, 2, 5, 3, 2, 4, 0, 0, 5, 2, 1, 1, 2, 2, 2, 5,\n","        2, 1, 1, 1, 1, 2, 4, 1])}\n","{'input_ids': tensor([[1569, 1713,   40,  ..., 1289, 1289, 1289],\n","        [1569,  902, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 1827,  341,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  410, 1308,  ..., 1289, 1289, 1289],\n","        [1569, 2012, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 2, 2, 5, 2, 5, 2, 2, 2, 2, 2, 2, 1, 5, 6, 1, 1, 1, 2, 2, 2, 1, 3,\n","        1, 6, 2, 6, 2, 1, 1, 0])}\n","{'input_ids': tensor([[1569,  917, 2265,  ..., 1289, 1289, 1289],\n","        [1569,  324,  762,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1222, 1486,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 2002,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 2, 2, 2, 2, 2, 2, 4, 5, 3, 2, 6, 1, 1, 3, 0, 3, 1, 2, 0, 4, 2, 2, 0,\n","        2, 2, 2, 2, 5, 2, 2, 1])}\n","{'input_ids': tensor([[1569, 2117,   40,  ..., 1289, 1289, 1289],\n","        [1569, 2038, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  410, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2225, 2174,  ..., 1289, 1289, 1289],\n","        [1569, 2029, 1611,  ..., 1289, 1289, 1289],\n","        [1569,  917,  194,  ..., 1289, 1289, 1289]]), 'label': tensor([5, 6, 1, 2, 1, 4, 2, 2, 2, 2, 1, 5, 1, 2, 3, 5, 2, 1, 2, 1, 6, 3, 2, 1,\n","        4, 4, 2, 2, 6, 1, 2, 2])}\n","{'input_ids': tensor([[1569, 1981,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1222, 1486,  ..., 1289, 1289, 1289],\n","        [1569, 2217, 2225,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1606,  328,  ..., 1289, 1289, 1289],\n","        [1569, 1722, 1713,  ..., 1289, 1289, 1289],\n","        [1569,   40, 1713,  ...,  963, 2101,  917]]), 'label': tensor([5, 3, 2, 4, 1, 1, 5, 2, 2, 6, 1, 2, 1, 2, 2, 3, 4, 2, 2, 1, 3, 4, 2, 2,\n","        3, 2, 3, 2, 6, 2, 0, 4])}\n","{'input_ids': tensor([[1569, 1713, 1211,  ..., 1289, 1289, 1289],\n","        [1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569,  410, 1308,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  704, 1431,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1714, 1486,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 4, 2, 2, 5, 0, 2, 2, 5, 2, 3, 1, 5, 2, 2, 4, 2, 1, 1, 2, 3, 2, 6, 2,\n","        1, 1, 5, 6, 2, 2, 1, 2])}\n","{'input_ids': tensor([[1569,  125, 1973,  ..., 1289, 1289, 1289],\n","        [1569,  117,  990,  ..., 1289, 1289, 1289],\n","        [1569, 1245, 1260,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2213, 1072,  ..., 1289, 1289, 1289],\n","        [1569,  917,  819,  ..., 1713, 1713, 1713],\n","        [1569, 1222, 1486,  ..., 1289, 1289, 1289]]), 'label': tensor([3, 2, 1, 6, 2, 5, 2, 1, 5, 1, 3, 2, 2, 4, 1, 2, 2, 3, 2, 2, 0, 2, 2, 1,\n","        2, 2, 4, 3, 2, 4, 2, 1])}\n","{'input_ids': tensor([[1569,  129,  193,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1749,  ..., 1289, 1289, 1289],\n","        [1569, 2225, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1245, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  322, 2225,  ..., 1289, 1289, 1289],\n","        [1569,  517,  535,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 2, 1, 1, 2, 4, 2, 2, 1, 2, 1, 1, 5, 2, 4, 2, 2, 2, 3, 5, 2, 0, 3, 2,\n","        2, 1, 1, 3, 3, 1, 2, 6])}\n","{'input_ids': tensor([[1569, 1705, 1210,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  129, 1713,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 2, 2, 1, 1, 1, 1, 6, 4, 2, 4, 4, 2, 2, 5, 6, 1, 2, 6, 4, 1, 4, 2, 3,\n","        1, 5, 2, 2, 3, 1, 2, 2])}\n","{'input_ids': tensor([[1569,  917,  199,  ..., 1289, 1289, 1289],\n","        [1569, 2063, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1979,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1011,  947,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 1320,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 2, 3, 6, 6, 2, 6, 3, 1, 2, 1, 0, 2, 4, 2, 2, 2, 5, 2, 1, 2, 2, 2, 5,\n","        0, 2, 1, 2, 2, 0, 1, 1])}\n","{'input_ids': tensor([[1569,  550, 1713,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2177,  ..., 1289, 1289, 1289],\n","        [1569, 2036,  309,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 1548, 1310,  ..., 1289, 1289, 1289],\n","        [1569,  322, 2225,  ..., 1289, 1289, 1289],\n","        [1569, 1713, 1713,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 2, 5, 5, 2, 2, 2, 4, 3, 1, 2, 2, 2, 2, 1, 1, 2, 4, 2, 0, 5, 1, 5, 2,\n","        2, 4, 2, 1, 2, 2, 6, 3])}\n","{'input_ids': tensor([[1569, 1705, 1187,  ..., 1289, 1289, 1289],\n","        [1569,  917,   20,  ..., 1289, 1289, 1289],\n","        [1569, 1011,  947,  ..., 2188, 1311, 1704],\n","        ...,\n","        [1569,  917, 2280,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1447, 1652,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 2, 4, 4, 2, 2, 3, 2, 1, 2, 1, 5, 1, 1, 2, 1, 3, 2, 5, 2, 2, 2, 1, 1,\n","        2, 0, 6, 3, 2, 1, 1, 2])}\n","{'input_ids': tensor([[1569, 1274, 1037,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2282,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 2114,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569, 2096,  784,  ..., 1289, 1289, 1289],\n","        [1569, 1705, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 2012,  685,  ..., 1289, 1289, 1289]]), 'label': tensor([4, 3, 2, 2, 4, 1, 2, 1, 4, 2, 2, 1, 2, 1, 1, 2, 5, 2, 1, 1, 6, 2, 2, 1,\n","        1, 2, 5, 3, 4, 3, 2, 5])}\n","{'input_ids': tensor([[1569, 1262, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1263, 1217,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  517,  535,  ..., 1289, 1289, 1289],\n","        [1569,  129, 1495,  ..., 1289, 1289, 1289],\n","        [1569,  109,  845,  ..., 1289, 1289, 1289]]), 'label': tensor([2, 1, 2, 5, 6, 6, 1, 2, 1, 6, 4, 2, 2, 1, 4, 1, 6, 2, 2, 3, 1, 2, 6, 2,\n","        2, 5, 2, 1, 6, 3, 3, 1])}\n","{'input_ids': tensor([[1569, 1981,  535,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569, 2242, 1274,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  441, 2188,  ..., 1289, 1289, 1289],\n","        [1569,  705,  535,  ..., 1289, 1289, 1289],\n","        [1569,  581,   56,  ..., 1289, 1289, 1289]]), 'label': tensor([6, 1, 4, 2, 1, 1, 2, 2, 2, 1, 2, 4, 1, 6, 2, 5, 2, 2, 2, 0, 6, 2, 6, 5,\n","        2, 2, 2, 4, 0, 1, 2, 2])}\n","{'input_ids': tensor([[1569, 1705,   63,  ..., 1289, 1289, 1289],\n","        [1569, 2195, 1358,  ..., 1289, 1289, 1289],\n","        [1569,  917, 2265,  ..., 1289, 1289, 1289],\n","        ...,\n","        [1569,  917,  956,  ..., 1289, 1289, 1289],\n","        [1569, 1606, 1713,  ..., 1289, 1289, 1289],\n","        [1569, 1546, 1264,  ..., 1289, 1289, 1289]]), 'label': tensor([1, 3, 0, 0, 4, 1, 1, 2, 2, 2, 2, 2, 5, 2, 2, 1, 2, 2, 1, 3, 6, 1, 1, 2,\n","        6, 2])}\n"]}]},{"cell_type":"markdown","source":["### Задание 1 (2 балла)\n","\n","Напишите кастомный класс для модели трансформера для задачи классификации, использующей в качествке backbone какую-то из моделей huggingface.\n","\n","Т.е. конструктор класса должен принимать на вход название модели и подгружать её из huggingface, а затем использовать в качестве backbone (достаточно возможности использовать в качестве backbone те модели, которые упомянуты в последующих пунктах)"],"metadata":{"id":"t395freCxpOE"}},{"cell_type":"code","source":["### This is just an interface example. You may change it if you want.\n","\n","class TransformerClassificationModel(nn.Module):\n","    def __init__(self, num_classes):\n","        super(TransformerClassificationModel, self).__init__()\n","        self.backbone = DistilBertModel.from_pretrained('distilbert-base-uncased')\n","        self.drop = nn.Dropout(p=0.2)\n","        self.fc = nn.Linear(self.backbone.config.hidden_size, num_classes)\n","        # YOUR CODE: create additional layers for classfication\n","\n","    def forward(self, inputs, attention_mask):\n","        # YOUR CODE: propagate inputs through the model. Return dict with logits\n","        _, pooled_output = self.backbone(input_ids=inputs, attention_mask=attention_mask)\n","        outputs = self.fc(pooled_output)\n","        return outputs\n","\n","    def freeze_backbone(self):\n","        for param in self.backbone.parameters():\n","            param.requires_grad = False\n","\n","    def unfreeze_backbone(self):\n","        for param in self.backbone.parameters():\n","            param.requires_grad = True"],"metadata":{"id":"eX4VGWquyiMx","executionInfo":{"status":"ok","timestamp":1711989833707,"user_tz":-180,"elapsed":358,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["model_test = TransformerClassificationModel(num_classes=len(label2ind)).to(device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210,"referenced_widgets":["1ecb559de5874167acc5dc98d374c79d","b95f4bb33e7d47c18bd008071ea4e167","12d2f03c4db247f8a3872ac665284d19","0cc8e2a9b1634aaf8810443494f256e0","4e610e99a603427b9781c47ef2d8baeb","bbc774034aab4a6690aa05d014c9180c","cfaa926a31fe4f4c816e6833388f5ce8","a1fe8bf191f748afb31b8428b82c6063","86a6427c577d4797a420035057a7467e","9092db5b84364284b25a9aaf893e30e7","cea9b15561f5453bbc1f9b56d14f8791","a57c3430c5644bbe9fdaecf501820d2d","38147f643afb456c80bd1ca3d1350320","3b0527e1ed824a069ae07241ae11a078","8971777f05a246f48fdbb66415eec100","4b4e0fca180a46419101146429cf5fe1","288647bb4b004bdca84f0abb192f7439","37c1809691f94239ad7b4bd0ca9647d4","cb1c25a9994e4a779cb7865c5dde8c21","db9c1b9e509b426d9c85d43b6505ea65","fc7cbc82c8104549aec8c3ce5ecab5c1","0595f01f39ae4fe3824f51af12b04e84"]},"id":"WVbwwtPRYGws","executionInfo":{"status":"ok","timestamp":1711989844582,"user_tz":-180,"elapsed":8821,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"1dad5b4e-b7db-4922-8815-ad1a5bca6c87"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1ecb559de5874167acc5dc98d374c79d"}},"metadata":{"application/vnd.jupyter.widget-view+json":{"colab":{"custom_widget_manager":{"url":"https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"}}}}},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/268M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0595f01f39ae4fe3824f51af12b04e84"}},"metadata":{"application/vnd.jupyter.widget-view+json":{"colab":{"custom_widget_manager":{"url":"https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"}}}}}]},{"cell_type":"code","source":["model_test.freeze_backbone()"],"metadata":{"id":"Pn_9BOW1iG0R","executionInfo":{"status":"ok","timestamp":1711989844582,"user_tz":-180,"elapsed":6,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["test_out = model_test(batch)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"dza4gZEgiPdc","executionInfo":{"status":"error","timestamp":1711989907931,"user_tz":-180,"elapsed":2366,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"2bffd4f3-57b0-4c61-b1b3-bd020047c764"},"execution_count":24,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"TransformerClassificationModel.forward() missing 1 required positional argument: 'attention_mask'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-8eeeba7ce2ee>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtest_out\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_test\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1509\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1510\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1511\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1512\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1518\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1519\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1520\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1521\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1522\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: TransformerClassificationModel.forward() missing 1 required positional argument: 'attention_mask'"]}]},{"cell_type":"markdown","source":["### Задание 2 (1 балл)\n","\n","Напишите функцию заморозки backbone у модели (если необходимо, возвращайте из функции модель)"],"metadata":{"id":"Vd3kxX6hy0d4"}},{"cell_type":"code","source":["def freeze_backbone_function(model: TransformerClassificationModel):\n","    pass"],"metadata":{"id":"U8IuDosbzKe8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 3 (2 балла)\n","\n","Напишите функцию, которая будет использована для тренировки (дообучения) трансформера (TransformerClassificationModel). Функция должна поддерживать обучение с замороженным и размороженным backbone."],"metadata":{"id":"kybkw6MSzd-K"}},{"cell_type":"code","source":["import copy\n","\n","def train_transformer(transformer_model, freeze_backbone=True)\n","    model = copy.copy(transformer_model)\n","    ### YOUR CODE IS HERE\n","\n","    losses = []\n","    for epoch in range(epochs):\n","        epoch_losses = []\n","        model.train()\n","\n","    return finetuned_model"],"metadata":{"id":"EDhrD0BHzxi4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 4 (1 балл)\n","\n","Проверьте вашу функцию из предыдущего пункта, дообучив двумя способами\n","*cointegrated/rubert-tiny2* из huggingface."],"metadata":{"id":"eUqhI4mV_RTI"}},{"cell_type":"code","source":["rubert_tiny_transformer_model = #...\n","rubert_tiny_finetuned_with_freezed_backbone = train_transformer(rubert_tiny_transformer_model, freeze_backbone=True)\n","\n","rubert_tiny_transformer_model = #...\n","rubert_tiny_full_finetuned = train_transformer(rubert_tiny_transformer_model, freeze_backbone=False)"],"metadata":{"id":"nuxOCBQHAKZC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 5 (1 балл)\n","\n","Обучите *tbs17/MathBert* (с замороженным backbone и без заморозки), проанализируйте результаты. Сравните скоры с первым заданием. Получилось лучше или нет? Почему?"],"metadata":{"id":"zRi7tkoOAjon"}},{"cell_type":"code","source":["### YOUR CODE IS HERE (probably, similar on the previous step)"],"metadata":{"id":"XKtd3YgNA14E"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 6 (1 балл)\n","\n","Напишите функцию для отрисовки карт внимания первого слоя для моделей из задания"],"metadata":{"id":"EuU6Di26017B"}},{"cell_type":"code","source":["def draw_first_layer_attention_maps(attention_head_ids: List, text: str, model: TransformerClassificationModel):\n","    pass"],"metadata":{"id":"guzGxfcV1Cba"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 7 (1 балл)\n","\n","Проведите инференс для всех моделей **ДО ДООБУЧЕНИЯ** на 2-3 текстах из датасета. Посмотрите на головы Attention первого слоя в каждой модели на выбранных текстах (отрисуйте их отдельно).\n","\n","Попробуйте их проинтерпретировать. Какие связи улавливают карты внимания? (если в модели много голов Attention, то проинтерпретируйте наиболее интересные)"],"metadata":{"id":"Iu0adKw4BLtF"}},{"cell_type":"code","source":["### YOUR CODE IS HERE"],"metadata":{"id":"U2gEF3vkB6eR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 8 (1 балл)\n","\n","Сделайте то же самое для дообученных моделей. Изменились ли карты внимания и связи, которые они улавливают? Почему?"],"metadata":{"id":"pBNVrOpCCLqk"}},{"cell_type":"code","source":["### YOUR CODE IS HERE"],"metadata":{"id":"F5229WBICWEr"},"execution_count":null,"outputs":[]}]}