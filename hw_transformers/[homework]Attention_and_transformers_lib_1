{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1q77WixYXvCFQtvRD-RbCQe7zC06hn7d7","timestamp":1708365361858},{"file_id":"12BxEICwjMhOcIQID1zn06K6kFG92GZcf","timestamp":1708035269638},{"file_id":"1pYR9hzeFxq1T5kZThLvgA7bkmcNQtbrq","timestamp":1707661673565}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["<p style=\"align: center;\"><img src=\"https://static.tildacdn.com/tild6636-3531-4239-b465-376364646465/Deep_Learning_School.png\" width=\"400\"></p>\n","\n","# Глубокое обучение. Часть 2\n","# Домашнее задание по теме \"Механизм внимания\""],"metadata":{"id":"Ji8KtYOVGs8_"}},{"cell_type":"markdown","source":["Это домашнее задание проходит в формате peer-review. Это означает, что его будут проверять ваши однокурсники. Поэтому пишите разборчивый код, добавляйте комментарии и пишите выводы после проделанной работы.\n","\n","В этом задании вы будете решать задачу классификации математических задач по темам (многоклассовая классификация) с помощью Transformer.\n","\n","В качестве датасета возьмем датасет математических задач по разным темам. Нам необходим следующий файл:\n","\n","[Файл с классами](https://docs.google.com/spreadsheets/d/1IMRxByfg7gjoZ5i7rxvuNDvSrbdOJOc-/edit?usp=drive_link&ouid=104379615679964018037&rtpof=true&sd=true)"],"metadata":{"id":"UAr-M8_1GJ6W"}},{"cell_type":"markdown","source":["**Hint:** не перезаписывайте модели, которые вы получите на каждом из этапов этого дз. Они ещё понадобятся."],"metadata":{"id":"1fybMcmV0YRA"}},{"cell_type":"code","source":["from google.colab import output\n","output.enable_custom_widget_manager()\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","path_to_data = '/content/drive/MyDrive/Deep_Learning_MIPT_2/hw_transformers/data_problems.xlsx'\n","\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","from tqdm.auto import tqdm\n","from nltk.tokenize import word_tokenize\n","from sklearn.model_selection import train_test_split\n","from sklearn.utils import shuffle\n","from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report, confusion_matrix\n","import nltk\n","from nltk.corpus import stopwords\n","\n","from collections import Counter\n","from typing import List\n","import string\n","\n","import random\n","\n","from transformers import DistilBertModel\n","from transformers import DistilBertTokenizer\n","\n","import seaborn as sns\n","\n","device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","print(device)\n","\n","nltk.download('punkt')\n","nltk.download('stopwords')\n","\n","from transformers import AutoTokenizer, AutoModel\n","\n","!pip install datasets -q\n","import datasets\n","from datasets import load_metric\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","import torchsummary\n","\n","sns.set(palette='summer')\n","sns.set(style=\"whitegrid\", font_scale=1.)\n","RUSSIAN_STOP_WORDS = set(stopwords.words('russian'))\n","\n","!pip install evaluate -q\n","\n","import transformers\n","import evaluate"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"emchZSbJS5rm","executionInfo":{"status":"ok","timestamp":1713116339613,"user_tz":-180,"elapsed":22597,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"82a048c1-0165-4c95-f16e-928c115aac9a"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","cpu\n"]},{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]}]},{"cell_type":"code","source":["init_df = pd.read_excel(path_to_data)\n","\n","print(f'init_df.shape = {init_df.shape}')\n","print(f'init_df.keys() = {init_df.keys()}')\n","\n","df = init_df.drop(columns=['Unnamed: 0'])\n","\n","df = df.rename(columns={'Задача': 'text', 'Тема': 'label'})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9mx5sIV5S5tp","executionInfo":{"status":"ok","timestamp":1713109794651,"user_tz":-180,"elapsed":2204,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"8288ee60-bacb-443b-b0df-ce6ed56b1034"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["init_df.shape = (5273, 3)\n","init_df.keys() = Index(['Unnamed: 0', 'Задача', 'Тема'], dtype='object')\n"]}]},{"cell_type":"code","source":["labels_vocab = list(set(df['label']))\n","label2ind = {char: i for i, char in enumerate(labels_vocab)}\n","ind2label = {i: char for char, i in label2ind.items()}"],"metadata":{"id":"NSM6Dj6HTFNB","executionInfo":{"status":"ok","timestamp":1713109794652,"user_tz":-180,"elapsed":16,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["df.groupby('label').count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"Rkns55T6TFPS","executionInfo":{"status":"ok","timestamp":1713109794654,"user_tz":-180,"elapsed":16,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"b9130c11-7503-4fc3-b87f-24b3d3bd24cf"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               text\n","label              \n","Геометрия       371\n","Графы           384\n","Дирихле         441\n","Инвариант       235\n","Комбинаторика  1020\n","Многочлен       426\n","Теория чисел   2396"],"text/html":["\n","  <div id=\"df-4ec3205f-842f-4434-935f-fd7190ac6f77\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Геометрия</th>\n","      <td>371</td>\n","    </tr>\n","    <tr>\n","      <th>Графы</th>\n","      <td>384</td>\n","    </tr>\n","    <tr>\n","      <th>Дирихле</th>\n","      <td>441</td>\n","    </tr>\n","    <tr>\n","      <th>Инвариант</th>\n","      <td>235</td>\n","    </tr>\n","    <tr>\n","      <th>Комбинаторика</th>\n","      <td>1020</td>\n","    </tr>\n","    <tr>\n","      <th>Многочлен</th>\n","      <td>426</td>\n","    </tr>\n","    <tr>\n","      <th>Теория чисел</th>\n","      <td>2396</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ec3205f-842f-4434-935f-fd7190ac6f77')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4ec3205f-842f-4434-935f-fd7190ac6f77 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4ec3205f-842f-4434-935f-fd7190ac6f77');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ea2efa85-d364-49b7-b530-534e36cfa507\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea2efa85-d364-49b7-b530-534e36cfa507')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ea2efa85-d364-49b7-b530-534e36cfa507 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"\\u0413\\u0435\\u043e\\u043c\\u0435\\u0442\\u0440\\u0438\\u044f\",\n          \"\\u0413\\u0440\\u0430\\u0444\\u044b\",\n          \"\\u041c\\u043d\\u043e\\u0433\\u043e\\u0447\\u043b\\u0435\\u043d\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 766,\n        \"min\": 235,\n        \"max\": 2396,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          371,\n          384,\n          426\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# def preprocess_text(text):\n","#     processed_text = text.lower().translate(str.maketrans(string.punctuation, ' '*len(string.punctuation)))\n","#     processed_text_no_sw = ' '.join([word for word in processed_text.split(' ') if word not in RUSSIAN_STOP_WORDS and word != ''])\n","#     return processed_text_no_sw"],"metadata":{"id":"Kr6hFvEXTH-x","executionInfo":{"status":"ok","timestamp":1713110112589,"user_tz":-180,"elapsed":7,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# class WordDataset:\n","#     def __init__(self, sentences, tokenizer, max_length=256):\n","#         self.data = sentences\n","#         self.max_length = max_length\n","#         self.tokenizer = tokenizer\n","\n","#     def __getitem__(self, idx: int) -> List[int]:\n","#         text = self.data.iloc[idx]['text']\n","#         preprocessed_text = preprocess_text(text)\n","#         encode = self.tokenizer.encode_plus(preprocessed_text, max_length=self.max_length, padding='max_length', truncation=True, return_tensors='pt')\n","#         tokenized_sentence = encode['input_ids']\n","#         attention_mask = encode['attention_mask']\n","\n","#         train_sample = {\n","#             \"text\": tokenized_sentence,\n","#             \"mask\": attention_mask,\n","#             \"label\": label2ind[self.data.iloc[idx]['label']]\n","#         }\n","\n","#         return train_sample\n","\n","#     def __len__(self) -> int:\n","#         return len(self.data)"],"metadata":{"id":"8N0vRoVITIBQ","executionInfo":{"status":"ok","timestamp":1713110112590,"user_tz":-180,"elapsed":5,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["df_shuffled = shuffle(df)\n","df_train = df_shuffled[:int(len(df_shuffled)*0.8)]\n","df_test  = df_shuffled[int(len(df_shuffled)*0.8):]"],"metadata":{"id":"3nBXmatXTLkN","executionInfo":{"status":"ok","timestamp":1713109794971,"user_tz":-180,"elapsed":5,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nNgtarwmcIcK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ds = datasets.Dataset.from_pandas(df_shuffled)"],"metadata":{"id":"4sFbhkokr2jb","executionInfo":{"status":"ok","timestamp":1713118441867,"user_tz":-180,"elapsed":9,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["ds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xM_Eo0DBr2lj","executionInfo":{"status":"ok","timestamp":1713118441868,"user_tz":-180,"elapsed":8,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"95037d07-1866-409d-d126-1624261dd475"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Dataset({\n","    features: ['text', 'label', '__index_level_0__'],\n","    num_rows: 5273\n","})"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["# ds = ds.train_test_split(test_size=0.1)"],"metadata":{"id":"6HuEelH9sXzh","executionInfo":{"status":"ok","timestamp":1713118447471,"user_tz":-180,"elapsed":18,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["ds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6nfyRWWEsX1z","executionInfo":{"status":"ok","timestamp":1713118447473,"user_tz":-180,"elapsed":15,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"e9bdc588-9a79-4e40-9be1-133a1bb1dcc3"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Dataset({\n","    features: ['text', 'label', '__index_level_0__'],\n","    num_rows: 5273\n","})"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":[],"metadata":{"id":"yKDIgYHosX3x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# def preprocess_text(text):\n","#     processed_text = text.lower().translate(str.maketrans(string.punctuation, ' '*len(string.punctuation)))\n","#     processed_text_no_sw = ' '.join([word for word in processed_text.split(' ') if word not in RUSSIAN_STOP_WORDS and word != ''])\n","#     return processed_text_no_sw"],"metadata":{"id":"y9OOW63lfmtF","executionInfo":{"status":"ok","timestamp":1713113040639,"user_tz":-180,"elapsed":405,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"SEC_cmL1uVtN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def preprocess_text(text):\n","    processed_text = [t.lower().translate(str.maketrans(string.punctuation, ' '*len(string.punctuation))) for t in text]\n","    processed_text_no_sw = [' '.join([word for word in t.split(' ') if word not in RUSSIAN_STOP_WORDS and word != '']) for t in processed_text]\n","    return processed_text_no_sw"],"metadata":{"id":"UroXFgKVuVx_","executionInfo":{"status":"ok","timestamp":1713117101440,"user_tz":-180,"elapsed":273,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"TEV3LclevLMr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_shuffled['text'].iloc[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"0BDfh66dvLOp","executionInfo":{"status":"ok","timestamp":1713117221801,"user_tz":-180,"elapsed":11,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"1f31f5ed-276b-47ec-ba86-4a3ecb0971e6"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Сколько целых чисел от 1 до 2001 имеют сумму цифр, делящуюся на 5? '"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["preprocess_text(df_shuffled['text'])[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"9nWIqzMPvLQ-","executionInfo":{"status":"ok","timestamp":1713117201029,"user_tz":-180,"elapsed":269,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"983f7b83-a686-44c5-b863-ef9204f46212"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'сколько целых чисел 1 2001 имеют сумму цифр делящуюся 5'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":[],"metadata":{"id":"la0XzNmduV0h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# def preprocess_function(examples, tokenizer):\n","#     model_inputs = tokenizer(examples[\"text\"], max_length=1024, truncation=True)\n","\n","#     labels = tokenizer(text_target=examples[\"summary\"], max_length=128, truncation=True)\n","\n","#     model_inputs[\"label\"] = labels[\"input_ids\"]\n","#     return model_inputs"],"metadata":{"id":"ar1FYWhzcIhG","executionInfo":{"status":"ok","timestamp":1713112166088,"user_tz":-180,"elapsed":8,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# list(map(label2ind.get, df['label']))"],"metadata":{"id":"yWd7KkO_hClj","executionInfo":{"status":"ok","timestamp":1713113529157,"user_tz":-180,"elapsed":1221,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["def preprocess_function(examples, tokenizer, max_len, label2ind_dict):\n","    preprocessed_text = preprocess_text(examples[\"text\"])\n","    model_inputs = tokenizer.encode_plus(preprocessed_text, max_length=max_len,\n","                                         padding='max_length', truncation=True, return_tensors='pt')\n","    labels = list(map(label2ind_dict.get, examples[\"label\"]))\n","    model_inputs[\"labels\"] = labels\n","\n","    return model_inputs\n","\n","    # model_inputs = tokenizer(examples[\"text\"], max_length=1024, truncation=True)\n","\n","    # labels = tokenizer(text_target=examples[\"summary\"], max_length=128, truncation=True)\n","\n","    # model_inputs[\"label\"] = labels[\"input_ids\"]\n","    # return model_inputs"],"metadata":{"id":"OFHVr2fSfunh","executionInfo":{"status":"ok","timestamp":1713116650496,"user_tz":-180,"elapsed":651,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"C5ipp3Ocfupo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"VySJYRmHtaJq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 1 (2 балла)\n","\n","Напишите кастомный класс для модели трансформера для задачи классификации, использующей в качествке backbone какую-то из моделей huggingface.\n","\n","Т.е. конструктор класса должен принимать на вход название модели и подгружать её из huggingface, а затем использовать в качестве backbone (достаточно возможности использовать в качестве backbone те модели, которые упомянуты в последующих пунктах)"],"metadata":{"id":"t395freCxpOE"}},{"cell_type":"code","source":["### This is just an interface example. You may change it if you want.\n","\n","class TransformerClassificationModel(nn.Module):\n","    def __init__(self, num_classes, backbone):\n","        super(TransformerClassificationModel, self).__init__()\n","        self.backbone = backbone\n","        self.drop = nn.Dropout(p=0.2)\n","        self.fc = nn.Linear(self.backbone.config.hidden_size, num_classes)\n","\n","    def forward(self, inputs, attention_mask):\n","        outputs = self.backbone(input_ids=inputs, attention_mask=attention_mask)\n","        pooled_output = outputs[0][:, 0, :]\n","        logits = self.fc(pooled_output)\n","        attention_weights = outputs[-1][-1]\n","        return logits, attention_weights\n","\n","    def freeze_backbone(self):\n","        for param in self.backbone.parameters():\n","            param.requires_grad = False\n","\n","    def unfreeze_backbone(self):\n","        for param in self.backbone.parameters():\n","            param.requires_grad = True"],"metadata":{"id":"eX4VGWquyiMx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"2fPX3BRDUtpx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rubert_tokenizer = AutoTokenizer.from_pretrained(\"cointegrated/rubert-tiny\")\n","rubert_tiny_backbone = AutoModel.from_pretrained(\"cointegrated/rubert-tiny\", output_attentions=True)"],"metadata":{"id":"b7jkXEmLUtr9","executionInfo":{"status":"ok","timestamp":1713110181658,"user_tz":-180,"elapsed":5,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["max_len=128"],"metadata":{"id":"fvAzysbitspW","executionInfo":{"status":"ok","timestamp":1713118452454,"user_tz":-180,"elapsed":4,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["def preprocess_function_rubert(examples):\n","    preprocessed_text = preprocess_text(examples[\"text\"])\n","    model_inputs = rubert_tokenizer.encode_plus(preprocessed_text, max_length=max_len,\n","                                         padding='max_length', truncation=True, return_tensors='pt')\n","    labels = list(map(label2ind.get, examples[\"label\"]))\n","    model_inputs[\"labels\"] = labels\n","\n","    return model_inputs"],"metadata":{"id":"HlGdPvAgtetW","executionInfo":{"status":"ok","timestamp":1713118452826,"user_tz":-180,"elapsed":3,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"8VNt4R0fyyWG","executionInfo":{"status":"ok","timestamp":1713118462108,"user_tz":-180,"elapsed":3,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["def preprocess_function_rubert(examples):\n","    preprocessed_text = preprocess_text(examples[\"text\"])\n","    model_inputs = [rubert_tokenizer.encode_plus(t, max_length=max_len,padding='max_length', truncation=True, return_tensors='pt') for t in preprocessed_text]\n","    labels = list(map(label2ind.get, examples[\"label\"]))\n","    for i in range(0, len(model_inputs)):\n","        model_inputs[i][\"labels\"] = labels[i]\n","\n","    return model_inputs"],"metadata":{"id":"WOgaeHbcyyY9","executionInfo":{"status":"ok","timestamp":1713120060009,"user_tz":-180,"elapsed":4,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"kSmT8q3ayybD","executionInfo":{"status":"ok","timestamp":1713120060695,"user_tz":-180,"elapsed":9,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":["ds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IewoILLq0IYL","executionInfo":{"status":"ok","timestamp":1713120061804,"user_tz":-180,"elapsed":15,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"40fb983c-8a7f-4de6-b1e4-8a845c0c703d"},"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Dataset({\n","    features: ['text', 'label', '__index_level_0__'],\n","    num_rows: 5273\n","})"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["preproc_ds = preprocess_function_rubert(ds)"],"metadata":{"id":"7vHID2GL6eNi","executionInfo":{"status":"ok","timestamp":1713120114189,"user_tz":-180,"elapsed":4901,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["preproc_ds[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"At9rbZ646pji","executionInfo":{"status":"ok","timestamp":1713120146110,"user_tz":-180,"elapsed":491,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"18241798-8521-4e3e-c928-660b5d8f6100"},"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'input_ids': tensor([[    2,   329, 27672, 13120,  2313, 25548,    21,   684, 10080, 28195,\n","          1707,   334,   613,  2698,   870,  4614,   776, 16530,   938,    25,\n","             3,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","             0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","             0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","             0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","             0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","             0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","             0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","             0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","             0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","             0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n","             0,     0,     0,     0,     0,     0,     0,     0]]), 'token_type_ids': tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","         0, 0, 0, 0, 0, 0, 0, 0]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n","         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","         0, 0, 0, 0, 0, 0, 0, 0]]), 'labels': 4}"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":[],"metadata":{"id":"ysD5_O2l0gHS","executionInfo":{"status":"ok","timestamp":1713120235026,"user_tz":-180,"elapsed":573,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["# tokenized_ds = ds.map(preprocess_function_rubert, batched=True)"],"metadata":{"id":"2_hBrEBotevU","executionInfo":{"status":"ok","timestamp":1713121328083,"user_tz":-180,"elapsed":5,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":82,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"3DpmGLHN79bD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_fZmTNSb79dh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"8B3157LG79fx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Z-U8SdhbuBrM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"8yFZxHE6uBtO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KSmzd6n2tPPt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 2 (1 балл)\n","\n","Напишите функцию заморозки backbone у модели (если необходимо, возвращайте из функции модель)"],"metadata":{"id":"Vd3kxX6hy0d4"}},{"cell_type":"code","source":[],"metadata":{"id":"EG_igCCoUsD9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def freeze_backbone_function(model: TransformerClassificationModel):\n","    pass"],"metadata":{"id":"U8IuDosbzKe8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 3 (2 балла)\n","\n","Напишите функцию, которая будет использована для тренировки (дообучения) трансформера (TransformerClassificationModel). Функция должна поддерживать обучение с замороженным и размороженным backbone."],"metadata":{"id":"kybkw6MSzd-K"}},{"cell_type":"code","source":["import copy\n","\n","def train_transformer(transformer_model, freeze_backbone=True)\n","    model = copy.copy(transformer_model)\n","    ### YOUR CODE IS HERE\n","\n","    return finetuned_model"],"metadata":{"id":"EDhrD0BHzxi4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 4 (1 балл)\n","\n","Проверьте вашу функцию из предыдущего пункта, дообучив двумя способами\n","*cointegrated/rubert-tiny2* из huggingface."],"metadata":{"id":"eUqhI4mV_RTI"}},{"cell_type":"code","source":["rubert_tiny_transformer_model = #...\n","rubert_tiny_finetuned_with_freezed_backbone = train_transformer(rubert_tiny_transformer_model, freeze_backbone=True)\n","\n","rubert_tiny_transformer_model = #...\n","rubert_tiny_full_finetuned = train_transformer(rubert_tiny_transformer_model, freeze_backbone=False)"],"metadata":{"id":"nuxOCBQHAKZC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 5 (1 балл)\n","\n","Обучите *tbs17/MathBert* (с замороженным backbone и без заморозки), проанализируйте результаты. Сравните скоры с первым заданием. Получилось лучше или нет? Почему?"],"metadata":{"id":"zRi7tkoOAjon"}},{"cell_type":"code","source":["### YOUR CODE IS HERE (probably, similar on the previous step)"],"metadata":{"id":"XKtd3YgNA14E"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 6 (1 балл)\n","\n","Напишите функцию для отрисовки карт внимания первого слоя для моделей из задания"],"metadata":{"id":"EuU6Di26017B"}},{"cell_type":"code","source":["def draw_first_layer_attention_maps(attention_head_ids: List, text: str, model: TransformerClassificationModel):\n","    pass"],"metadata":{"id":"guzGxfcV1Cba"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 7 (1 балл)\n","\n","Проведите инференс для всех моделей **ДО ДООБУЧЕНИЯ** на 2-3 текстах из датасета. Посмотрите на головы Attention первого слоя в каждой модели на выбранных текстах (отрисуйте их отдельно).\n","\n","Попробуйте их проинтерпретировать. Какие связи улавливают карты внимания? (если в модели много голов Attention, то проинтерпретируйте наиболее интересные)"],"metadata":{"id":"Iu0adKw4BLtF"}},{"cell_type":"code","source":["### YOUR CODE IS HERE"],"metadata":{"id":"U2gEF3vkB6eR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 8 (1 балл)\n","\n","Сделайте то же самое для дообученных моделей. Изменились ли карты внимания и связи, которые они улавливают? Почему?"],"metadata":{"id":"pBNVrOpCCLqk"}},{"cell_type":"code","source":["### YOUR CODE IS HERE"],"metadata":{"id":"F5229WBICWEr"},"execution_count":null,"outputs":[]}]}