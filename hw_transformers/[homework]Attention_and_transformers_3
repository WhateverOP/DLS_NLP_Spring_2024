{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1q77WixYXvCFQtvRD-RbCQe7zC06hn7d7","timestamp":1708365361858},{"file_id":"12BxEICwjMhOcIQID1zn06K6kFG92GZcf","timestamp":1708035269638},{"file_id":"1pYR9hzeFxq1T5kZThLvgA7bkmcNQtbrq","timestamp":1707661673565}],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"8a883da73bc94c048158acffb8da49b3":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ad1e9899490f4e1c9dd593813ff7b6f1","IPY_MODEL_7b644c2ed4824369a1cf8b51bf1bbcba","IPY_MODEL_65596089550044e6a6a7b02883ea8904"],"layout":"IPY_MODEL_3c37e8c2ddc846cf902770a518056481"}},"ad1e9899490f4e1c9dd593813ff7b6f1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_64d04ac474a24ad692eadbc07d583403","placeholder":"​","style":"IPY_MODEL_1c4075095b1741e8ab4631e9f3466e31","value":"tokenizer_config.json: 100%"}},"7b644c2ed4824369a1cf8b51bf1bbcba":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_16cc1a591be54dc3a67fb14ceb08e142","max":28,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9dcfa96040b44c5db90ad1371e4d59d7","value":28}},"65596089550044e6a6a7b02883ea8904":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a83d76df54784adebd02cb87d12861a9","placeholder":"​","style":"IPY_MODEL_9ca900ec2902479ab5fbb7a175da6c1d","value":" 28.0/28.0 [00:00&lt;00:00, 1.94kB/s]"}},"3c37e8c2ddc846cf902770a518056481":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"64d04ac474a24ad692eadbc07d583403":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1c4075095b1741e8ab4631e9f3466e31":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"16cc1a591be54dc3a67fb14ceb08e142":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9dcfa96040b44c5db90ad1371e4d59d7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a83d76df54784adebd02cb87d12861a9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9ca900ec2902479ab5fbb7a175da6c1d":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"57b690ecd18f49c3af24157451d645ee":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_9b94cda6b4c44e5e80f5c479902519d3","IPY_MODEL_16ee6516c6a54122ad2d9c126ae53c8b","IPY_MODEL_4f77e2fc86ab4612bc516fea7566b9fa"],"layout":"IPY_MODEL_b9eb5214a9244e0ea71a91fc2cd177ec"}},"9b94cda6b4c44e5e80f5c479902519d3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fc26a15ab7d54b7ebed3c804f2c03ab2","placeholder":"​","style":"IPY_MODEL_bdf10a48ad8147fa865c04516dd935a7","value":"vocab.txt: 100%"}},"16ee6516c6a54122ad2d9c126ae53c8b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_383dcb7d6d13424b9e7a12253c82ccf1","max":231508,"min":0,"orientation":"horizontal","style":"IPY_MODEL_03e66524978941bd88b74af95c2ac5eb","value":231508}},"4f77e2fc86ab4612bc516fea7566b9fa":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ab9ee9567da64fa6b61cd0248981304a","placeholder":"​","style":"IPY_MODEL_e8e90d1dd2ea4a129233ca9e0f60e42c","value":" 232k/232k [00:00&lt;00:00, 4.16MB/s]"}},"b9eb5214a9244e0ea71a91fc2cd177ec":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fc26a15ab7d54b7ebed3c804f2c03ab2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bdf10a48ad8147fa865c04516dd935a7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"383dcb7d6d13424b9e7a12253c82ccf1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"03e66524978941bd88b74af95c2ac5eb":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"ab9ee9567da64fa6b61cd0248981304a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e8e90d1dd2ea4a129233ca9e0f60e42c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"be85a23600484818a72786b2491da793":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"79f079db942c43cc8f3290f4a2490084":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"b10f66cdf79d41049a36f68b39da662d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a0776e9028d3476f8c898591a61cb988":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7e51808974774d6cb7683db2b2a3bf75":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"78d34281ff92470098f7a68a1178f0de":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b5d1132b2fec491e9a31de842e097fa7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b10f66cdf79d41049a36f68b39da662d","placeholder":"​","style":"IPY_MODEL_a0776e9028d3476f8c898591a61cb988","value":"tokenizer.json: 100%"}},"5139c9ff0f8f43048be54100c1468743":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_be85a23600484818a72786b2491da793","max":466062,"min":0,"orientation":"horizontal","style":"IPY_MODEL_79f079db942c43cc8f3290f4a2490084","value":466062}},"d89ac326baa44241a80496ad73a8a97a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7e51808974774d6cb7683db2b2a3bf75","placeholder":"​","style":"IPY_MODEL_78d34281ff92470098f7a68a1178f0de","value":" 466k/466k [00:00&lt;00:00, 15.9MB/s]"}},"20775cffbf154a388befe02084af2cc2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5c27f6e8bbd64ba38593d65ab5043085":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b5d1132b2fec491e9a31de842e097fa7","IPY_MODEL_5139c9ff0f8f43048be54100c1468743","IPY_MODEL_d89ac326baa44241a80496ad73a8a97a"],"layout":"IPY_MODEL_20775cffbf154a388befe02084af2cc2"}},"b32b496c17c04a0f87c7b849e6cbefaa":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"28d8dfd9aade4fc8ace7d267647680a4":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a0b2764cfbe442d0a166e1faa118568b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"20da66fff3494a21958a54932e993104":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"001362c856dc49d5831f5179d8e8a68e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4bbce9cce5704837835c42d48da93cc3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"4ecbfeb52597428c92be9fba50d0f24a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a0b2764cfbe442d0a166e1faa118568b","placeholder":"​","style":"IPY_MODEL_20da66fff3494a21958a54932e993104","value":"config.json: 100%"}},"8c9e519a99974944ac92e4323a7f28c5":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_b32b496c17c04a0f87c7b849e6cbefaa","max":483,"min":0,"orientation":"horizontal","style":"IPY_MODEL_28d8dfd9aade4fc8ace7d267647680a4","value":483}},"33440ae5f3564c55b11bab0620a3a86b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_001362c856dc49d5831f5179d8e8a68e","placeholder":"​","style":"IPY_MODEL_4bbce9cce5704837835c42d48da93cc3","value":" 483/483 [00:00&lt;00:00, 33.3kB/s]"}},"9c7176692ab84172968360b7db5c6fec":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0ee5e6b853924e4693b755825a8c13ad":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_4ecbfeb52597428c92be9fba50d0f24a","IPY_MODEL_8c9e519a99974944ac92e4323a7f28c5","IPY_MODEL_33440ae5f3564c55b11bab0620a3a86b"],"layout":"IPY_MODEL_9c7176692ab84172968360b7db5c6fec"}}}}},"cells":[{"cell_type":"markdown","source":["<p style=\"align: center;\"><img src=\"https://static.tildacdn.com/tild6636-3531-4239-b465-376364646465/Deep_Learning_School.png\" width=\"400\"></p>\n","\n","# Глубокое обучение. Часть 2\n","# Домашнее задание по теме \"Механизм внимания\""],"metadata":{"id":"Ji8KtYOVGs8_"}},{"cell_type":"markdown","source":["Это домашнее задание проходит в формате peer-review. Это означает, что его будут проверять ваши однокурсники. Поэтому пишите разборчивый код, добавляйте комментарии и пишите выводы после проделанной работы.\n","\n","В этом задании вы будете решать задачу классификации математических задач по темам (многоклассовая классификация) с помощью Transformer.\n","\n","В качестве датасета возьмем датасет математических задач по разным темам. Нам необходим следующий файл:\n","\n","[Файл с классами](https://docs.google.com/spreadsheets/d/1IMRxByfg7gjoZ5i7rxvuNDvSrbdOJOc-/edit?usp=drive_link&ouid=104379615679964018037&rtpof=true&sd=true)"],"metadata":{"id":"UAr-M8_1GJ6W"}},{"cell_type":"markdown","source":["**Hint:** не перезаписывайте модели, которые вы получите на каждом из этапов этого дз. Они ещё понадобятся."],"metadata":{"id":"1fybMcmV0YRA"}},{"cell_type":"code","source":["from google.colab import output\n","output.enable_custom_widget_manager()\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uianmuEkjX0I","executionInfo":{"status":"ok","timestamp":1711995952750,"user_tz":-180,"elapsed":25924,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"74877815-fcd3-4a3c-ef98-865846d3e996"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["path_to_data = '/content/drive/MyDrive/Deep_Learning_MIPT_2/hw_transformers/data_problems.xlsx'\n","\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","from tqdm.auto import tqdm\n","from nltk.tokenize import word_tokenize\n","from sklearn.model_selection import train_test_split\n","from sklearn.utils import shuffle\n","import nltk\n","\n","from collections import Counter\n","from typing import List\n","import string\n","\n","import random\n","\n","from transformers import DistilBertModel\n","from transformers import DistilBertTokenizer\n","\n","import seaborn\n","seaborn.set(palette='summer')\n","\n","device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","print(device)\n","\n","nltk.download('punkt')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"avyH0R2RjZi_","executionInfo":{"status":"ok","timestamp":1711995964877,"user_tz":-180,"elapsed":8226,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"87205e89-5ac9-4e9e-ee77-092165ce84f6"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["cpu\n"]},{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["init_df = pd.read_excel(path_to_data)\n","\n","print(f'init_df.shape = {init_df.shape}')\n","print(f'init_df.keys() = {init_df.keys()}')\n","\n","df = init_df.drop(columns=['Unnamed: 0'])\n","\n","df = df.rename(columns={'Задача': 'text', 'Тема': 'label'})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7aiuRj1XjZlu","executionInfo":{"status":"ok","timestamp":1711995971157,"user_tz":-180,"elapsed":1211,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"4a8ee555-41f7-4e8e-9873-732ee5591afe"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["init_df.shape = (5273, 3)\n","init_df.keys() = Index(['Unnamed: 0', 'Задача', 'Тема'], dtype='object')\n"]}]},{"cell_type":"code","source":["labels_vocab = list(set(df['label']))\n","label2ind = {char: i for i, char in enumerate(labels_vocab)}\n","ind2label = {i: char for char, i in label2ind.items()}"],"metadata":{"id":"9ZK0wHBGjpII","executionInfo":{"status":"ok","timestamp":1711995971158,"user_tz":-180,"elapsed":5,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":274,"referenced_widgets":["8a883da73bc94c048158acffb8da49b3","ad1e9899490f4e1c9dd593813ff7b6f1","7b644c2ed4824369a1cf8b51bf1bbcba","65596089550044e6a6a7b02883ea8904","3c37e8c2ddc846cf902770a518056481","64d04ac474a24ad692eadbc07d583403","1c4075095b1741e8ab4631e9f3466e31","16cc1a591be54dc3a67fb14ceb08e142","9dcfa96040b44c5db90ad1371e4d59d7","a83d76df54784adebd02cb87d12861a9","9ca900ec2902479ab5fbb7a175da6c1d","57b690ecd18f49c3af24157451d645ee","9b94cda6b4c44e5e80f5c479902519d3","16ee6516c6a54122ad2d9c126ae53c8b","4f77e2fc86ab4612bc516fea7566b9fa","b9eb5214a9244e0ea71a91fc2cd177ec","fc26a15ab7d54b7ebed3c804f2c03ab2","bdf10a48ad8147fa865c04516dd935a7","383dcb7d6d13424b9e7a12253c82ccf1","03e66524978941bd88b74af95c2ac5eb","ab9ee9567da64fa6b61cd0248981304a","e8e90d1dd2ea4a129233ca9e0f60e42c","be85a23600484818a72786b2491da793","79f079db942c43cc8f3290f4a2490084","b10f66cdf79d41049a36f68b39da662d","a0776e9028d3476f8c898591a61cb988","7e51808974774d6cb7683db2b2a3bf75","78d34281ff92470098f7a68a1178f0de","b5d1132b2fec491e9a31de842e097fa7","5139c9ff0f8f43048be54100c1468743","d89ac326baa44241a80496ad73a8a97a","20775cffbf154a388befe02084af2cc2","5c27f6e8bbd64ba38593d65ab5043085","b32b496c17c04a0f87c7b849e6cbefaa","28d8dfd9aade4fc8ace7d267647680a4","a0b2764cfbe442d0a166e1faa118568b","20da66fff3494a21958a54932e993104","001362c856dc49d5831f5179d8e8a68e","4bbce9cce5704837835c42d48da93cc3","4ecbfeb52597428c92be9fba50d0f24a","8c9e519a99974944ac92e4323a7f28c5","33440ae5f3564c55b11bab0620a3a86b","9c7176692ab84172968360b7db5c6fec","0ee5e6b853924e4693b755825a8c13ad"]},"id":"OYhfYThLneL-","executionInfo":{"status":"ok","timestamp":1711995974994,"user_tz":-180,"elapsed":3515,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"82c80350-2ee8-404d-aed0-2f9c8897d4d1"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["tokenizer_config.json:   0%|          | 0.00/28.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8a883da73bc94c048158acffb8da49b3"}},"metadata":{"application/vnd.jupyter.widget-view+json":{"colab":{"custom_widget_manager":{"url":"https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"}}}}},{"output_type":"display_data","data":{"text/plain":["vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"57b690ecd18f49c3af24157451d645ee"}},"metadata":{"application/vnd.jupyter.widget-view+json":{"colab":{"custom_widget_manager":{"url":"https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"}}}}},{"output_type":"display_data","data":{"text/plain":["tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5c27f6e8bbd64ba38593d65ab5043085"}},"metadata":{"application/vnd.jupyter.widget-view+json":{"colab":{"custom_widget_manager":{"url":"https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"}}}}},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0ee5e6b853924e4693b755825a8c13ad"}},"metadata":{"application/vnd.jupyter.widget-view+json":{"colab":{"custom_widget_manager":{"url":"https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"}}}}}]},{"cell_type":"code","source":["text_len_list = []\n","for text in df['text']:\n","    text_len_list.append(len(text))"],"metadata":{"id":"f9JIaSI8qZel","executionInfo":{"status":"ok","timestamp":1711995974995,"user_tz":-180,"elapsed":9,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["print(np.mean(text_len_list))\n","print(max(text_len_list))\n","print(min(text_len_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"88oJsHy_qnv3","executionInfo":{"status":"ok","timestamp":1711995974996,"user_tz":-180,"elapsed":7,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"c77c2ba2-6e0a-48b4-c620-79ef130590ca"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["314.98710411530436\n","4489\n","1\n"]}]},{"cell_type":"code","source":["test_text = df['text'].iloc[0]\n","print(test_text)\n","encode_test = tokenizer.encode_plus(test_text, max_length=1024, padding='max_length', truncation=True, return_tensors='pt')\n","print(encode_test['input_ids'])\n","print(encode_test['attention_mask'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z6E5GQ8CnriZ","executionInfo":{"status":"ok","timestamp":1711995978349,"user_tz":-180,"elapsed":3,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"2f9a471d-f3ec-4713-c867-6748411f89e3"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Между девятью планетами Солнечной системы введено космическое сообщение.  Ракеты летают по следующим маршрутам: Земля – Меркурий, Плутон – Венера, Земля – Плутон, Плутон – Меркурий, Меркурий – Венера, Уран – Нептун, Нептун – Сатурн, Сатурн – Юпитер, Юпитер – Марс и Марс – Уран. Можно ли добраться с Земли до Марса? \n","tensor([[  101,  1191, 15290,  ...,     0,     0,     0]])\n","tensor([[1, 1, 1,  ..., 0, 0, 0]])\n"]}]},{"cell_type":"code","source":["print(list(map(tokenizer.decode, encode_test['input_ids'])))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nyq2aH5Ao_m1","executionInfo":{"status":"ok","timestamp":1711995979939,"user_tz":-180,"elapsed":8,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"c7d3234d-a33b-4234-97c4-812dbf7ce71d"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["['[CLS] между девятью планетами солнечнои системы введено космическое сообщение. ракеты летают по следующим маршрутам : земля – меркурии, плутон – венера, земля – плутон, плутон – меркурии, меркурии – венера, уран – нептун, нептун – сатурн, сатурн – юпитер, юпитер – марс и марс – уран. можно ли добраться с земли до марсаn"]}]},{"cell_type":"code","source":["class WordDataset:\n","    def __init__(self, sentences):\n","        self.data = sentences\n","\n","    def __getitem__(self, idx: int) -> List[int]:\n","        encode = tokenizer.encode_plus(self.data.iloc[idx]['text'], max_length=1024, padding='max_length', truncation=True, return_tensors='pt')\n","        tokenized_sentence = encode['input_ids']\n","        attention_mask = encode['attention_mask']\n","\n","        train_sample = {\n","            \"text\": tokenized_sentence,\n","            \"mask\": attention_mask,\n","            \"label\": label2ind[self.data.iloc[idx]['label']]\n","        }\n","\n","        return train_sample\n","\n","    def __len__(self) -> int:\n","        return len(self.data)"],"metadata":{"id":"h4P1GOYeuvhW","executionInfo":{"status":"ok","timestamp":1711995980981,"user_tz":-180,"elapsed":3,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["df_shuffled = shuffle(df)\n","df_train = df_shuffled[:int(len(df_shuffled)*0.8)]\n","df_test  = df_shuffled[int(len(df_shuffled)*0.8):]\n","\n","train_dataset = WordDataset(df_train)\n","eval_dataset = WordDataset(df_test)"],"metadata":{"id":"w0Zyl3dNuvj0","executionInfo":{"status":"ok","timestamp":1711995988395,"user_tz":-180,"elapsed":547,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["index = 1\n","print(len(train_dataset[index]['text']))\n","print(train_dataset[index]['text'])\n","print(list(map(tokenizer.decode, train_dataset[index]['text'])))\n","print(train_dataset[index]['mask'])\n","print(train_dataset[index]['label'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"to20fAI1uvnN","executionInfo":{"status":"ok","timestamp":1711995990223,"user_tz":-180,"elapsed":338,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"5f061024-6454-4ca8-9b01-04e332315dd8"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","tensor([[  101,  1194, 16856,  ..., 29754, 15414,   102]])\n","['[CLS] прямая касается окружности с центром o в точке a. точка c на этои прямои и точка d на окружности расположены по разные стороны от прямои oa. наидите угол cad, если угол aod равен 110o. прислать комментарии решение задача 53985 темы : [ угол между касательнои и хордои ] [ признаки и своиства касательнои ] сложность : 3классы : 8, 9 прямая касается окружности с центром o в точке a. точка c на этои прямои и точка d на окружности расположены по одну сторону от прямои oa. докажите, что угол cad вдвое меньше угла aod. прислать комментарии решение задача 52386 темы : [ углы, опирающиеся на равные дуги и равные хорды ] [ признаки подобия ] [ вписанные четырехугольники ( прочее ) ] сложность : 3классы : 8, 9 во вписанном четырехугольнике abcd, диагонали которого пересекаются в точке k, известно, что ab = a, bk = b, ak = c, cd = d. наидите ac. прислать комментарии решение задача 52770 темы : [ вписанныи угол, опирающиися на диаметр ] [ средняя линия треугольника ] [ теорема пифагора ( прямая и обратная ) ] сложность : 3классы : 8, 9 в четырехугольнике abcd [UNK] = [UNK] = 90°. кроме того, db = a, dc = b. наидите расстояние между центрами двух окружностеи, одна из которых проходит через точки d, a, b, а другая – через точки b, c, d. прислать комментарии решение задача 52897 темы : [ вписанныи угол, опирающии [SEP]']\n","tensor([[1, 1, 1,  ..., 1, 1, 1]])\n","0\n"]}]},{"cell_type":"code","source":["batch_size = 4\n","train_dataloader = DataLoader(\n","    train_dataset, shuffle=True, batch_size=batch_size)\n","\n","eval_dataloader = DataLoader(\n","    eval_dataset, shuffle=False, batch_size=batch_size)"],"metadata":{"id":"cD3gXidU1amG","executionInfo":{"status":"ok","timestamp":1711996016367,"user_tz":-180,"elapsed":219,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["for batch in train_dataloader:\n","    print(batch)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vh2mdfOr1hGF","executionInfo":{"status":"ok","timestamp":1711996037697,"user_tz":-180,"elapsed":16432,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"4e04972f-5e44-41ed-ef43-3609e55cb191"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 2, 2])}\n","{'text': tensor([[[  101,  1198, 28598,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 5, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 5, 6])}\n","{'text': tensor([[[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 0, 3, 0])}\n","{'text': tensor([[[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1180,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 1, 5])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 2])}\n","{'text': tensor([[[ 101, 1182, 1200,  ...,    0,    0,    0]],\n","\n","        [[ 101, 1180, 1007,  ...,    0,    0,    0]],\n","\n","        [[ 101, 1182, 1189,  ...,    0,    0,    0]],\n","\n","        [[ 101, 1182, 1182,  ...,    0,    0,    0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 5, 3, 1])}\n","{'text': tensor([[[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 1, 2, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  2531,  1183,  ..., 16856, 23742,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([6, 5, 3, 3])}\n","{'text': tensor([[[  101,  1189,  1184,  ...,     0,     0,     0]],\n","\n","        [[  101,  1200, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 4, 5, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 3, 1])}\n","{'text': tensor([[[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1203, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 5, 5])}\n","{'text': tensor([[[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 3])}\n","{'text': tensor([[[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 3, 3])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 29742,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1195,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 3, 5, 4])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1203,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 29747,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 5, 3])}\n","{'text': tensor([[[  101,  1194, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1187, 19865,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 3, 3])}\n","{'text': tensor([[[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 2, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 5, 3])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 6, 3, 3])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 5])}\n","{'text': tensor([[[  101,  1198, 28598,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 2, 5])}\n","{'text': tensor([[[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1200, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 1, 4, 6])}\n","{'text': tensor([[[  101,  1186, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 2, 6, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 5, 6])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1182,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 5])}\n","{'text': tensor([[[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 6])}\n","{'text': tensor([[[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1194,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 3, 5, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,  1010,  1188,   102]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 2, 5, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 29113,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 3, 3, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 3, 4, 3])}\n","{'text': tensor([[[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1187, 10260,  ..., 22919, 18947,   102]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 5, 0])}\n","{'text': tensor([[[  101,  1197, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1193,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 2, 3, 0])}\n","{'text': tensor([[[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 0, 5, 5])}\n","{'text': tensor([[[  101,  1196,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 6, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1183, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 6, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1051, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 0, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ..., 29748, 16856,   102]],\n","\n","        [[  101,  1182,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 3, 3])}\n","{'text': tensor([[[  101,  1184, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 0, 4, 1])}\n","{'text': tensor([[[  101,  1203, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1199, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,  1182,  1195,   102]],\n","\n","        [[  101,  1182,  1203,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 2, 3])}\n","{'text': tensor([[[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 5, 3, 4])}\n","{'text': tensor([[[  101,  1189, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 6, 3, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 5])}\n","{'text': tensor([[[  101,  1182, 18947,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 6, 5, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ..., 29436, 23742,   102]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 22919,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 6, 3, 3])}\n","{'text': tensor([[[  101,  1197, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1190,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 3, 5])}\n","{'text': tensor([[[  101,  1196, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 3, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 25529,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 2, 1])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1193,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 5, 3])}\n","{'text': tensor([[[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 29113,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 2, 5, 5])}\n","{'text': tensor([[[  101,  1189, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1200, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 3, 6])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 6, 5])}\n","{'text': tensor([[[  101,  1182,  1210,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 10325,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 5, 3])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 0, 3, 3])}\n","{'text': tensor([[[  101,  1189,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ..., 18947, 23483,   102]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 5, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 0, 2, 3])}\n","{'text': tensor([[[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 2, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1195,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 4])}\n","{'text': tensor([[[  101,  1194, 17432,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1194, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1193,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 1, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 5, 5])}\n","{'text': tensor([[[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 1, 4, 5])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 3, 1])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,   102,     0,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 0,  ..., 0, 0, 0]]]), 'label': tensor([4, 0, 6, 5])}\n","{'text': tensor([[[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 25529,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 1, 3])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 2, 4])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 5, 6])}\n","{'text': tensor([[[  101,  1193, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1184,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 5, 6, 3])}\n","{'text': tensor([[[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 3, 5, 6])}\n","{'text': tensor([[[  101,  1197, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 25529,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 3, 4])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 3, 0])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,  2620,  1197,   102]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 0, 3, 6])}\n","{'text': tensor([[[  101,  1182, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 6, 5, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1187,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 1])}\n","{'text': tensor([[[  101,  1182,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 3, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,  1196, 14150,   102]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 5, 0, 4])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1197, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 3, 1, 1])}\n","{'text': tensor([[[  101,  1194, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1188,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 3, 4])}\n","{'text': tensor([[[  101,  1052,  1006,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 2, 3])}\n","{'text': tensor([[[  101,  1182, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 4, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1184,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 5, 5])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1183,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 0, 6, 3])}\n","{'text': tensor([[[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 29740,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 1, 3, 3])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 6, 5])}\n","{'text': tensor([[[  101,  1185, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  2260,  1203,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 2, 6, 6])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29743,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 5, 3, 2])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 18947,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ..., 29436, 23742,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([5, 0, 5, 0])}\n","{'text': tensor([[[  101,  1182,  1195,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189,  1192,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 3, 3, 3])}\n","{'text': tensor([[[  101,  1197, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 5])}\n","{'text': tensor([[[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 18947,  ...,  1040,  1202,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([0, 5, 4, 0])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1202,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180, 25529,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 6, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1006, 17350,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 3, 6])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 2, 0, 6])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 2, 1, 4])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ..., 22919, 14150,   102]],\n","\n","        [[  101,  1182, 29747,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 0, 5])}\n","{'text': tensor([[[  101,  1209, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ..., 15290,  1197,   102]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 6])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1183, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 3, 3, 3])}\n","{'text': tensor([[[  101,  1202, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 3])}\n","{'text': tensor([[[  101,  1197, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 6])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1201, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 5, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 18947,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 3, 3])}\n","{'text': tensor([[[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 22919,  ...,  1038,  1188,   102]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 3, 0, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1049,  1188,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 5, 3])}\n","{'text': tensor([[[  101,  1202, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1203, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1197, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 2, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 4, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 4, 5])}\n","{'text': tensor([[[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,  1015,  1016,   102]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 0, 3, 4])}\n","{'text': tensor([[[  101,  2322,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 4, 3, 1])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 3, 3])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 2, 3, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 1, 6, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 3, 3, 1])}\n","{'text': tensor([[[  101,  1182,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 5, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 5, 5])}\n","{'text': tensor([[[  101,  1196, 19259,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 3, 4])}\n","{'text': tensor([[[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1186, 15290,  ..., 18947, 10325,   102]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 4, 5, 5])}\n","{'text': tensor([[[  101,   102,     0,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 0,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1197, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 5, 0])}\n","{'text': tensor([[[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 5, 6, 3])}\n","{'text': tensor([[[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 2, 3])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1181,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 6, 1])}\n","{'text': tensor([[[  101,  1193, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1016,  2078,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ..., 29436, 23742,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([2, 5, 6, 0])}\n","{'text': tensor([[[  101,  1189, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 17432,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 4, 3])}\n","{'text': tensor([[[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1190,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 3, 5])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1037,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1195,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 5, 6, 5])}\n","{'text': tensor([[[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 29747,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 3, 3])}\n","{'text': tensor([[[  101,  1200, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 18947,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 2, 6, 6])}\n","{'text': tensor([[[  101,  1198, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 5, 3, 3])}\n","{'text': tensor([[[  101,  1188, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 4, 0, 1])}\n","{'text': tensor([[[  101,  1198,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,  1182,  1197,   102]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 2, 0, 5])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 6])}\n","{'text': tensor([[[  101,  1182, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 15290,  ..., 29745, 10325,   102]],\n","\n","        [[  101,  1199, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 0, 5])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ..., 10260, 15290,   102]],\n","\n","        [[  101,  1192, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 4, 6, 3])}\n","{'text': tensor([[[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1015,  1016,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 4, 5])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1193,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1203,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 0, 5, 2])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 3, 3])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 10325,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 5, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 5, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 2, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 4, 3])}\n","{'text': tensor([[[  101, 11113,  1188,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 3, 3, 3])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180, 29747,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 4, 5, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1182,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 0, 3, 3])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1203,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 2, 5])}\n","{'text': tensor([[[  101,  1194, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 6, 3, 2])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 0])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 2])}\n","{'text': tensor([[[  101,  1198,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 6, 5])}\n","{'text': tensor([[[  101,  1194, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 4, 1])}\n","{'text': tensor([[[  101,  1184, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 5, 6, 5])}\n","{'text': tensor([[[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1186, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 3, 3])}\n","{'text': tensor([[[  101,  1185, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ..., 10260,  1196,   102]],\n","\n","        [[  101,  1182,  1182,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 0, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 6, 3, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1198,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 1, 5, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ..., 18947, 10325,   102]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 5, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1190, 17432,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 10325,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 5, 3, 1])}\n","{'text': tensor([[[  101,  1202, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 29742,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 2, 1, 3])}\n","{'text': tensor([[[  101,  1182,  1198,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ..., 29751, 10260,   102]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 18947,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 3, 1])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ..., 15290, 29742,   102]],\n","\n","        [[  101,  1196, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 0, 2])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 2, 3])}\n","{'text': tensor([[[  101,  1182,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 5, 3, 0])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 5])}\n","{'text': tensor([[[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1060,  2487,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 6, 6])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 1, 5, 3])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 29750,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 3])}\n","{'text': tensor([[[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,  1031,  1182,   102]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 4, 5])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 1])}\n","{'text': tensor([[[  101,  1182,  1198,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,  2078,  1027,   102]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  2260,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 3, 3, 2])}\n","{'text': tensor([[[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1047,  1182,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 3])}\n","{'text': tensor([[[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29749,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 4, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 3, 2])}\n","{'text': tensor([[[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1187, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ..., 29745,  1012,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([3, 1, 2, 0])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1203, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 3, 3])}\n","{'text': tensor([[[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 0, 5])}\n","{'text': tensor([[[  101,  1000,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1197, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 0, 3, 3])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198, 28598,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 6, 3])}\n","{'text': tensor([[[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 6, 4, 3])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1197, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 6, 1])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  2423,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 5, 1])}\n","{'text': tensor([[[  101,  1182,  1187,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 2, 5])}\n","{'text': tensor([[[  101,  1006,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 29746,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 0, 5, 6])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 5, 4])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 5, 2, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1050,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29742,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 0, 1])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 5, 6])}\n","{'text': tensor([[[  101,  1191, 18947,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ..., 22919,  1210,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([6, 5, 3, 4])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 22919,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 1, 5, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 6, 3])}\n","{'text': tensor([[[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  2410,  1184,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1193, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1182,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 5, 5, 4])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 10325,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 4, 3])}\n","{'text': tensor([[[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1052,  1188,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 3])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1037,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,  1012,  1192,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([6, 3, 6, 0])}\n","{'text': tensor([[[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 5, 6, 3])}\n","{'text': tensor([[[  101,  1182,  1210,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198, 29752,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 6, 6, 5])}\n","{'text': tensor([[[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 2, 3, 6])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 4, 5, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1037,  1516,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 3])}\n","{'text': tensor([[[  101,  2423,  1191,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1182,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 5, 5])}\n","{'text': tensor([[[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ..., 15290, 29750,   102]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 4, 2])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 0, 3, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 4, 6])}\n","{'text': tensor([[[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1203,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1203,  ...,     0,     0,     0]],\n","\n","        [[  101,  1197, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 2, 4])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1190, 29757,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 5, 3])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 29747,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 0, 5, 5])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 1, 3])}\n","{'text': tensor([[[  101,  1203, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 28598,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ..., 15290, 22919,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([3, 3, 5, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 3, 5, 3])}\n","{'text': tensor([[[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1192,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 0, 3, 4])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1194,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 1])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 0, 5, 0])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1193,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 3, 3])}\n","{'text': tensor([[[  101,  1200, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101, 12862,  1203,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 2, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 3, 3])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 4])}\n","{'text': tensor([[[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1052,  1516,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29741,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 3, 3])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 3, 3, 4])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1187, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 0, 3])}\n","{'text': tensor([[[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 3, 3, 5])}\n","{'text': tensor([[[  101,  1193, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 2, 4, 3])}\n","{'text': tensor([[[  101,  1189, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29741,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 3])}\n","{'text': tensor([[[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ..., 10260,  1193,   102]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 23925,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 0, 3, 0])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 1, 6])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 2, 2])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 0, 0, 6])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1190, 10325,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 5, 3, 3])}\n","{'text': tensor([[[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1038,  1039,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 3, 0])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 5, 0])}\n","{'text': tensor([[[  101,  1182,  1191,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 0, 3])}\n","{'text': tensor([[[  101,  1202, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 2])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 4, 1])}\n","{'text': tensor([[[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  2321,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 2])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 5, 5])}\n","{'text': tensor([[[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 22919,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 1, 6, 6])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1191,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 2, 5])}\n","{'text': tensor([[[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 3, 3, 3])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 2])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 6, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 0, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 4, 3, 1])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1184,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 3, 3])}\n","{'text': tensor([[[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1190, 10325,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 3, 3, 2])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 1])}\n","{'text': tensor([[[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 2, 3, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1187, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 1, 3, 1])}\n","{'text': tensor([[[  101,  1197, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 6])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198, 29752,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 3, 5])}\n","{'text': tensor([[[  101,  1189, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1203,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 5, 1])}\n","{'text': tensor([[[  101,  1199, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 5])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 3, 2])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 18947,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 0, 3])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 3, 6])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 5, 3])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198, 29752,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 1, 3, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1201, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 1, 3])}\n","{'text': tensor([[[  101,  1193, 22919,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  2531,  1199,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 5])}\n","{'text': tensor([[[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1203, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 5, 0, 3])}\n","{'text': tensor([[[  101,  1182,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1208, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1186, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 2, 1])}\n","{'text': tensor([[[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 6, 3, 3])}\n","{'text': tensor([[[  101,  1189, 19259,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 6, 2, 3])}\n","{'text': tensor([[[  101,  1182, 29113,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ..., 18947, 15290,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([1, 3, 3, 0])}\n","{'text': tensor([[[  101,  1181, 29113,  ...,     0,     0,     0]],\n","\n","        [[  101,  1052,  1188,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 2, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 3, 3, 5])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 2, 5])}\n","{'text': tensor([[[  101,  1201, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 6, 1, 5])}\n","{'text': tensor([[[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1183, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 5, 6])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 5, 3])}\n","{'text': tensor([[[  101,  1182,  1193,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  2322,  1199,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 3])}\n","{'text': tensor([[[  101,  1182,  1181,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1187, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 4, 3, 6])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 5, 1, 3])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 5, 3])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1193,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 1, 4, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1015,  1010,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 3])}\n","{'text': tensor([[[  101,  1194, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1201, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 2])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1182,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 1, 3, 5])}\n","{'text': tensor([[[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1190, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1183, 18947,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1193,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 1, 3, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 29746,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1190,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 0, 3])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 18947,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 2])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 2, 3, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 6, 3, 5])}\n","{'text': tensor([[[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 4, 2, 3])}\n","{'text': tensor([[[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 3, 3, 5])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 4, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 4, 3])}\n","{'text': tensor([[[  101,  1182,  1202,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 1, 1, 4])}\n","{'text': tensor([[[  101,  1184, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 29740,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 3, 4, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1203, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 3])}\n","{'text': tensor([[[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1200, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1039,  1517,  ...,     0,     0,     0]],\n","\n","        [[  101,  1185, 29747,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 0, 3])}\n","{'text': tensor([[[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1193,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29744,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 3, 3])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1193,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 2, 5, 3])}\n","{'text': tensor([[[  101,  1193, 29740,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1194,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 4, 1, 3])}\n","{'text': tensor([[[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 0, 2])}\n","{'text': tensor([[[  101,  1193, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 3, 2])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1194,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 1, 5, 3])}\n","{'text': tensor([[[  101,  1182,  1195,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 10325,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 4, 3])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 29742,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 5, 3, 6])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ..., 22919, 16856,   102]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 3, 6, 2])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 0, 3])}\n","{'text': tensor([[[  101, 17350,  1010,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ..., 29742, 23742,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([5, 5, 5, 2])}\n","{'text': tensor([[[  101,  1050, 18107,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1210,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 3, 3, 3])}\n","{'text': tensor([[[  101,  1202, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 5, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1190, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 1])}\n","{'text': tensor([[[  101,  1190, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1199, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 1, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,   102,     0,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29747,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 0,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 5])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 0, 1, 3])}\n","{'text': tensor([[[  101,  1182,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 0, 5, 3])}\n","{'text': tensor([[[  101,  1194, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1197, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 25529,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 0, 2, 5])}\n","{'text': tensor([[[  101,  1180, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 5, 3])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ..., 14150, 29743,   102]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]]]), 'label': tensor([3, 5, 3, 1])}\n","{'text': tensor([[[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 29742,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 3])}\n","{'text': tensor([[[  101,  1193, 29747,  ..., 22919, 14150,   102]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1199,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 5, 3, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 25529,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 6, 1, 5])}\n","{'text': tensor([[[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 2, 2, 3])}\n","{'text': tensor([[[  101,  1180,  1007,  ..., 15290, 29753,   102]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 3, 3, 3])}\n","{'text': tensor([[[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 5])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1183, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 5, 5])}\n","{'text': tensor([[[  101,  1189, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1182,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 3, 3, 1])}\n","{'text': tensor([[[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 29740,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1191, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 4, 6])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1197, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 6, 3, 1])}\n","{'text': tensor([[[  101,  5925,  1517,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1188,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 6, 2, 5])}\n","{'text': tensor([[[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1052,  1010,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 29747,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 3, 3, 0])}\n","{'text': tensor([[[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1199, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1182,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 1, 3, 2])}\n","{'text': tensor([[[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 3, 4, 3])}\n","{'text': tensor([[[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 0, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([2, 2, 4, 5])}\n","{'text': tensor([[[  101,  1192, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 19259,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 1, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 3])}\n","{'text': tensor([[[  101,  1197, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([4, 5, 5, 6])}\n","{'text': tensor([[[  101,  1182,  1197,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 5, 3, 0])}\n","{'text': tensor([[[  101,  1198,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 2])}\n","{'text': tensor([[[  101,  1188, 29744,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1197,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 6, 0, 2])}\n","{'text': tensor([[[  101,  4052,  1201,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 6, 2])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 1, 2, 3])}\n","{'text': tensor([[[  101,  1182,  1195,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1181,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 5, 3, 5])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1192,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 2])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1184,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 2, 2, 3])}\n","{'text': tensor([[[  101,  1180,  1007,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1188,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 25529,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 29748,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 1])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 5, 5])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 29748,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 5, 1, 3])}\n","{'text': tensor([[[  101,  1181, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1199, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 1, 3, 5])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198, 29752,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1183,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 22919,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 5])}\n","{'text': tensor([[[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 3])}\n","{'text': tensor([[[  101,  2382,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1193, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ..., 10325, 23925,   102]],\n","\n","        [[  101,  2531,  1189,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 1, 1, 1]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([1, 0, 0, 1])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1184,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 15290,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 3, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 5, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1200, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1202, 10325,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180, 18947,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1182,  1189,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1196, 23925,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1196,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 4, 3, 2])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 28995,  ...,     0,     0,     0]],\n","\n","        [[  101,  1187, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1188, 29745,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 3])}\n","{'text': tensor([[[  101,  1184, 29436,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 16856,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1198,  1191,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([6, 2, 4, 2])}\n","{'text': tensor([[[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1182,  1193,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1192, 10260,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 5, 3, 1])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([0, 2, 1, 5])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1194, 15290,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]],\n","\n","        [[  101,  1180,  1007,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3, 3, 5])}\n","{'text': tensor([[[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1195, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1189, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1184, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([5, 5, 1, 3])}\n","{'text': tensor([[[  101,  1192, 10260,  ...,     0,     0,     0]],\n","\n","        [[  101,  1191, 14150,  ...,     0,     0,     0]]]), 'mask': tensor([[[1, 1, 1,  ..., 0, 0, 0]],\n","\n","        [[1, 1, 1,  ..., 0, 0, 0]]]), 'label': tensor([3, 3])}\n"]}]},{"cell_type":"markdown","source":["### Задание 1 (2 балла)\n","\n","Напишите кастомный класс для модели трансформера для задачи классификации, использующей в качествке backbone какую-то из моделей huggingface.\n","\n","Т.е. конструктор класса должен принимать на вход название модели и подгружать её из huggingface, а затем использовать в качестве backbone (достаточно возможности использовать в качестве backbone те модели, которые упомянуты в последующих пунктах)"],"metadata":{"id":"t395freCxpOE"}},{"cell_type":"code","source":["### This is just an interface example. You may change it if you want.\n","\n","class TransformerClassificationModel(nn.Module):\n","    def __init__(self, num_classes):\n","        super(TransformerClassificationModel, self).__init__()\n","        self.backbone = DistilBertModel.from_pretrained('distilbert-base-uncased')\n","        self.drop = nn.Dropout(p=0.2)\n","        self.fc = nn.Linear(self.backbone.config.hidden_size, num_classes)\n","        # YOUR CODE: create additional layers for classfication\n","\n","    def forward(self, inputs, attention_mask):\n","        # YOUR CODE: propagate inputs through the model. Return dict with logits\n","        output = self.backbone(input_ids=inputs, attention_mask=attention_mask)\n","        pooled_output = outputs[0][:, 0, :] # Take the first token's output\n","        outputs = self.fc(pooled_output)\n","        return outputs\n","\n","    def freeze_backbone(self):\n","        for param in self.backbone.parameters():\n","            param.requires_grad = False\n","\n","    def unfreeze_backbone(self):\n","        for param in self.backbone.parameters():\n","            param.requires_grad = True"],"metadata":{"id":"eX4VGWquyiMx","executionInfo":{"status":"ok","timestamp":1711996313961,"user_tz":-180,"elapsed":7,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["model_test = TransformerClassificationModel(num_classes=len(label2ind)).to(device)"],"metadata":{"id":"FG15zmEh1rF4","executionInfo":{"status":"ok","timestamp":1711996317636,"user_tz":-180,"elapsed":1022,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["model_test.freeze_backbone()"],"metadata":{"id":"GuKm5Hk41rIN","executionInfo":{"status":"ok","timestamp":1711996317636,"user_tz":-180,"elapsed":14,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["print(batch['text'].shape)\n","print(batch['mask'].shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"chxG-75A2poP","executionInfo":{"status":"ok","timestamp":1711996317637,"user_tz":-180,"elapsed":14,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"68ef29d6-f59b-437e-9993-a704ab92e03c"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([2, 1, 1024])\n","torch.Size([2, 1, 1024])\n"]}]},{"cell_type":"code","source":["print(batch['text'].permute(0, 2, 1).shape)\n","print(batch['mask'].permute(0, 2, 1).shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rUhC2w615YS9","executionInfo":{"status":"ok","timestamp":1711996317637,"user_tz":-180,"elapsed":11,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"60202fc7-f03f-4bdf-baa8-24b5739b531f"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([2, 1024, 1])\n","torch.Size([2, 1024, 1])\n"]}]},{"cell_type":"code","source":["# test_out = model_test(batch['text'].permute(0, 2, 1), batch['mask'].permute(0, 2, 1))"],"metadata":{"id":"nbR-4ABA1rKO","executionInfo":{"status":"ok","timestamp":1711996329988,"user_tz":-180,"elapsed":8,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["test_out = model_test(batch['text'], batch['mask'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":315},"id":"jIpmLTLe1rMM","executionInfo":{"status":"error","timestamp":1711996343821,"user_tz":-180,"elapsed":15,"user":{"displayName":"Pavel Oskin","userId":"12795831590389692658"}},"outputId":"90856837-4361-4cb6-fc95-d8c952f0389e"},"execution_count":36,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"too many values to unpack (expected 3)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-0df9b58ecdf3>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtest_out\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_test\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'text'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'mask'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1509\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1510\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1511\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1512\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1518\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1519\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1520\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1521\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1522\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-29-23dca4491cf6>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, inputs, attention_mask)\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattention_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0;31m# YOUR CODE: propagate inputs through the model. Return dict with logits\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackbone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_ids\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattention_mask\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattention_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m         \u001b[0mpooled_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m# Take the first token's output\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpooled_output\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1509\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1510\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1511\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1512\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1518\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1519\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1520\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1521\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1522\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/models/distilbert/modeling_distilbert.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input_ids, attention_mask, head_mask, inputs_embeds, output_attentions, output_hidden_states, return_dict)\u001b[0m\n\u001b[1;32m    820\u001b[0m                 \u001b[0mattention_mask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# (bs, seq_length)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 822\u001b[0;31m         return self.transformer(\n\u001b[0m\u001b[1;32m    823\u001b[0m             \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0membeddings\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    824\u001b[0m             \u001b[0mattn_mask\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattention_mask\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1509\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1510\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1511\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1512\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1518\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1519\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1520\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1521\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1522\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/models/distilbert/modeling_distilbert.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x, attn_mask, head_mask, output_attentions, output_hidden_states, return_dict)\u001b[0m\n\u001b[1;32m    585\u001b[0m                 )\n\u001b[1;32m    586\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 587\u001b[0;31m                 layer_outputs = layer_module(\n\u001b[0m\u001b[1;32m    588\u001b[0m                     \u001b[0mhidden_state\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    589\u001b[0m                     \u001b[0mattn_mask\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1509\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1510\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1511\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1512\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1518\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1519\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1520\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1521\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1522\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/models/distilbert/modeling_distilbert.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x, attn_mask, head_mask, output_attentions)\u001b[0m\n\u001b[1;32m    511\u001b[0m         \"\"\"\n\u001b[1;32m    512\u001b[0m         \u001b[0;31m# Self-Attention\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 513\u001b[0;31m         sa_output = self.attention(\n\u001b[0m\u001b[1;32m    514\u001b[0m             \u001b[0mquery\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    515\u001b[0m             \u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1509\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1510\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1511\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1512\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1518\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1519\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1520\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1521\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1522\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/models/distilbert/modeling_distilbert.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, query, key, value, mask, head_mask, output_attentions)\u001b[0m\n\u001b[1;32m    219\u001b[0m             seq_length, dim) Contextualized layer. Optional: only if `output_attentions=True`\n\u001b[1;32m    220\u001b[0m         \"\"\"\n\u001b[0;32m--> 221\u001b[0;31m         \u001b[0mbs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mq_length\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mquery\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    222\u001b[0m         \u001b[0mk_length\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0;31m# assert dim == self.dim, f'Dimensions do not match: {dim} input vs {self.dim} configured'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 3)"]}]},{"cell_type":"code","source":[],"metadata":{"id":"NZRAYma01rN-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 2 (1 балл)\n","\n","Напишите функцию заморозки backbone у модели (если необходимо, возвращайте из функции модель)"],"metadata":{"id":"Vd3kxX6hy0d4"}},{"cell_type":"code","source":["def freeze_backbone_function(model: TransformerClassificationModel):\n","    pass"],"metadata":{"id":"U8IuDosbzKe8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 3 (2 балла)\n","\n","Напишите функцию, которая будет использована для тренировки (дообучения) трансформера (TransformerClassificationModel). Функция должна поддерживать обучение с замороженным и размороженным backbone."],"metadata":{"id":"kybkw6MSzd-K"}},{"cell_type":"code","source":["import copy\n","\n","def train_transformer(transformer_model, freeze_backbone=True)\n","    model = copy.copy(transformer_model)\n","    ### YOUR CODE IS HERE\n","\n","    return finetuned_model"],"metadata":{"id":"EDhrD0BHzxi4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 4 (1 балл)\n","\n","Проверьте вашу функцию из предыдущего пункта, дообучив двумя способами\n","*cointegrated/rubert-tiny2* из huggingface."],"metadata":{"id":"eUqhI4mV_RTI"}},{"cell_type":"code","source":["rubert_tiny_transformer_model = #...\n","rubert_tiny_finetuned_with_freezed_backbone = train_transformer(rubert_tiny_transformer_model, freeze_backbone=True)\n","\n","rubert_tiny_transformer_model = #...\n","rubert_tiny_full_finetuned = train_transformer(rubert_tiny_transformer_model, freeze_backbone=False)"],"metadata":{"id":"nuxOCBQHAKZC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 5 (1 балл)\n","\n","Обучите *tbs17/MathBert* (с замороженным backbone и без заморозки), проанализируйте результаты. Сравните скоры с первым заданием. Получилось лучше или нет? Почему?"],"metadata":{"id":"zRi7tkoOAjon"}},{"cell_type":"code","source":["### YOUR CODE IS HERE (probably, similar on the previous step)"],"metadata":{"id":"XKtd3YgNA14E"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 6 (1 балл)\n","\n","Напишите функцию для отрисовки карт внимания первого слоя для моделей из задания"],"metadata":{"id":"EuU6Di26017B"}},{"cell_type":"code","source":["def draw_first_layer_attention_maps(attention_head_ids: List, text: str, model: TransformerClassificationModel):\n","    pass"],"metadata":{"id":"guzGxfcV1Cba"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 7 (1 балл)\n","\n","Проведите инференс для всех моделей **ДО ДООБУЧЕНИЯ** на 2-3 текстах из датасета. Посмотрите на головы Attention первого слоя в каждой модели на выбранных текстах (отрисуйте их отдельно).\n","\n","Попробуйте их проинтерпретировать. Какие связи улавливают карты внимания? (если в модели много голов Attention, то проинтерпретируйте наиболее интересные)"],"metadata":{"id":"Iu0adKw4BLtF"}},{"cell_type":"code","source":["### YOUR CODE IS HERE"],"metadata":{"id":"U2gEF3vkB6eR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Задание 8 (1 балл)\n","\n","Сделайте то же самое для дообученных моделей. Изменились ли карты внимания и связи, которые они улавливают? Почему?"],"metadata":{"id":"pBNVrOpCCLqk"}},{"cell_type":"code","source":["### YOUR CODE IS HERE"],"metadata":{"id":"F5229WBICWEr"},"execution_count":null,"outputs":[]}]}